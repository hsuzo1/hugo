[{"categories":["life"],"contents":"\r2024年，随着气候剧烈变化的是工作岗位的变化，比祖国大地还要广阔的是政府责任的边界。\n24K黄金从年初的¥470.08/g一路涨到¥541.05/g，但是方方面面仍然感觉没钱，社会消费仍然十分低迷。\n2024年5月麦肯锡对中国消费所调研后所做\r报告\r指出，消费者们的消费预期仍较为谨慎，储蓄意愿强劲，短期内消费潜力未完全释放，还有增长空间。2/3以上人口仍然乐观，特别是Z世代、一线富裕银发族、三线富裕中老年值得重点关注。一二线新中产、农村中老年最为悲观，对消费有一定抑制作用。在品类上，消费者意向出现分化，消费升降级普遍存在，而成长品类中观念驱动因素较高。企业仍需在细分赛道和人群中寻找增长机会。\n与消费密切相关的还有人口的显著变化，任泽平团队持续关注人口变化情况。在出生人口自2017年以来连续七年下降之后，2023年出生人口902万人，比2022年减少54万人，继续创新低。2023年总人口比上年减少208万，连续两年负增长且减量扩大。老龄化、少子化、不婚化三大趋势加速到来。人口因素影响重大深远，生育政策调整是最根本、最重要的供给侧结构性改革之一。\n2016年出生高峰之后，这些人群购房需求大约在2035年左右达到顶峰，届时全社会的房产资源将全面进入另一状况，类似日本的老人屋将逐渐成为人们话题的热词。\n如此种种，犹如无边阴云长期笼罩在头上，对未来的迷茫，对旧时光的怀念，交织在一起，让这个龙年变得非同寻常！\n广安日报有一篇文章很有启发：\n1980年2月29日，在中共十一届五中全会第三次全体会议上，邓小平指出：“开会要开小会，开短会，不开无准备的会。会上讲短话，话不离题。议这个问题，你就对这个问题发表意见，赞成或反对，讲理由，扼要一点；没有话就把嘴巴一闭。不开空话连篇的会，不发离题万里的议论。”\n邓小平认为，形式主义也是官僚主义。他对空话套话深恶痛绝，要求开会、讲话、写文章都要着眼于解决问题，空话套话不要说。他提出“要开小会，开短会”“有话则长、无话则短”“没有话就把嘴巴一闭”。他讲话，一般不用事先准备稿子，只有在一些重要场合，一些重大问题需要进行深入阐述时才由别人帮助起草稿子。即使这样，他也总是要求起草人从政治角度看问题，抓住要害，文字不能太多，而且都是自己先写出简明的提纲。1979年3月，为了准备在党的理论工作务虚会上的讲话，他专门把胡乔木等同志请到家里，谈稿子的起草问题。看了已经起草的稿子，他说：现在文字太多，枝叶太多，比较平淡，吸引力不够。现在要强调的只是几个问题，语言太多，把要突出的问题冲淡了。这篇讲话是政治性的讲话，不需要讲很多理论的话。\n有什么样的话风，就有什么样的文风。邓小平的文风也和他的话风一样，言简意赅。他曾经说过：“学马列要精，要管用的。长篇的东西是少数搞专业的人读的，群众怎么读？”1950年7月，他给中央写的报告，涉及方方面面问题，也不过一两千字，毛泽东大加赞赏：“看邓小平的报告，好像吃冰糖葫芦！”20世纪80年代整理出版《邓小平文选》时，有好几篇文章，邓小平亲自操刀改，因为他觉得“太啰嗦了，删节一半”。确实，“陈言务去、文风当简”，少一些穿靴戴帽、空话套话，多办一些实事、要事，群众是看得到的、欢迎的。\n","date":"2024-06-08T23:02:31+08:00","permalink":"//localhost:1313/post/life/2024longzhou/","section":"post","tags":["life"],"title":"不一样的龙年"},{"categories":["tech"],"contents":"\rSelenium\r是支持 web 浏览器自动化的一系列工具和库的综合项目，目前版本为selenium4.9.1。通过该工具您可以自动化操控chrome、firefox、edge等主流浏览器，效果相当于您亲手操作。本文主要基于python环境进行总结。\n准备一：安装selenium库\npip install selenium 准备二：下载对应浏览器的driver程序\n下载前需要确认电脑浏览器的版本号，再下载相对应的程序。\n微软Edge浏览器：\rMicrosoft Edge WebDriver\r谷歌浏览器：\rchromedriver\r火狐浏览器：\rgeckodriver\r如果需要其他浏览器驱动程序，也可以在\r淘宝镜像站\r上查找。驱动程序下载后，可以保存在对应浏览器的程序文件夹中，也可以放在python脚本目录中，只要运行时指定好程序路径即可。\nfrom selenium import webdriver from selenium.webdriver.chrome.service import Service from selenium.webdriver.common.by import By exePath = r\u0026#39;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe\u0026#39; s = Service(exePath) op = webdriver.ChromeOptions() browser = webdriver.Chrome(service=s, options=op) browser.get(\u0026#39;http://www.gxela.gov.cn\u0026#39;) browser.maximize_window() browser.implicitly_wait(9) write = browser.find_element(By.ID,\u0026#34;j_username\u0026#34;) write.send_keys(\u0026#34;user123132\u0026#34;) write = browser.find_element(By.ID,\u0026#34;j_password1\u0026#34;) write.send_keys(\u0026#34;pwd123456786\u0026#34;) browser.find_element(By.XPATH, \u0026#39;//*[@id=\u0026#34;res-index\u0026#34;]/form[1]/div[4]\u0026#39;).click() 官方给出的入门例子 from selenium import webdriver from selenium.webdriver.common.by import By def test_eight_components(): driver = webdriver.Chrome() driver.get(\u0026#34;https://www.selenium.dev/selenium/web/web-form.html\u0026#34;) title = driver.title assert title == \u0026#34;Web form\u0026#34; driver.implicitly_wait(0.5) text_box = driver.find_element(by=By.NAME, value=\u0026#34;my-text\u0026#34;) submit_button = driver.find_element(by=By.CSS_SELECTOR, value=\u0026#34;button\u0026#34;) text_box.send_keys(\u0026#34;Selenium\u0026#34;) submit_button.click() message = driver.find_element(by=By.ID, value=\u0026#34;message\u0026#34;) value = message.text assert value == \u0026#34;Received!\u0026#34; driver.quit() 元素定位 主要有8种不同的内置元素定位策略：\n定位器Locator 描述 class name定位 class属性与搜索值匹配的元素（不允许使用复合类名） css selector 定位CSS选择器匹配的元素 id 定位id属性与搜索值匹配的元素 name 定位name属性与搜索值匹配的元素 link text 定位link text可视文本与搜索值完全匹配的锚元素 partial link text 定位link text可视文本部分与搜索值部分匹配的锚点元素。如果匹配多个元素，则只选择第一个元素。 tag name 定位标签名称与搜索值匹配的元素 xpath 定位与XPath表达式匹配的元素 # find_element只返回第一个元素，find_elements则返回元素集 # class name定位，information为类名 driver.find_element(By.CLASS_NAME, \u0026#34;information\u0026#34;) # css selector定位，fname为id driver.find_element(By.CSS_SELECTOR, \u0026#34;#fname\u0026#34;) # 通过id定位，lname为id driver.find_element(By.ID, \u0026#34;lname\u0026#34;) # name属性定位 driver.find_element(By.NAME, \u0026#34;newsletter\u0026#34;) # link text定位，为超链接标签名 driver.find_element(By.LINK_TEXT, \u0026#34;Selenium Official Page\u0026#34;) # partial link text，可以理解为部分匹配 driver.find_element(By.PARTIAL_LINK_TEXT, \u0026#34;Official Page\u0026#34;) # tag name定位 driver.find_element(By.TAG_NAME, \u0026#34;a\u0026#34;) # xpath定位 driver.find_element(By.XPATH, \u0026#34;//input[@value=\u0026#39;f\u0026#39;]\u0026#34;) # 嵌套查询 fruits = driver.find_element(By.ID, \u0026#34;fruits\u0026#34;) fruit = fruits.find_element(By.CLASS_NAME,\u0026#34;tomatoes\u0026#34;) # 或优化为 fruit = driver.find_element(By.CSS_SELECTOR,\u0026#34;#fruits .tomatoes\u0026#34;) # 查询div中全部p元素的文本内容并输出 element = driver.find_element(By.TAG_NAME, \u0026#39;div\u0026#39;) elements = element.find_elements(By.TAG_NAME, \u0026#39;p\u0026#39;) for e in elements: print(e.text) # 获取元素文本内容 text = driver.find_element(By.ID, \u0026#34;justanotherlink\u0026#34;).text # 页面元素是否显示 is_email_visible = driver.find_element(By.NAME, \u0026#34;email_input\u0026#34;).is_displayed() # 页面元素是否启用 is_email_visible = driver.find_element(By.NAME, \u0026#34;email_input\u0026#34;).is_displayed() # 元素是否被选中 value = driver.find_element(By.NAME, \u0026#34;checkbox_input\u0026#34;).is_selected() # 获取元素标签名 attr = driver.find_element(By.NAME, \u0026#34;email_input\u0026#34;).tag_name # 获取元素位置和大小，x、y、高度、宽度 res = driver.find_element(By.NAME, \u0026#34;range_input\u0026#34;).rect # 获取元素CSS值 cssValue = driver.find_element(By.ID, \u0026#34;namedColor\u0026#34;).value_of_css_property(\u0026#39;background-color\u0026#39;) # 获取特性或属性 email_txt = driver.find_element(By.NAME, \u0026#34;email_input\u0026#34;) value_info = email_txt.get_attribute(\u0026#34;value\u0026#34;) 文本输入和点击操作 from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys driver = webdriver.Firefox() driver.get(\u0026#34;http://www.google.com\u0026#34;) # 定位按钮并点击 submit_button = driver.find_element(by=By.CSS_SELECTOR, value=\u0026#34;button\u0026#34;).click() # 输入\u0026#34;webdriver\u0026#34;后按回车键 driver.find_element(By.NAME, \u0026#34;q\u0026#34;).send_keys(\u0026#34;webdriver\u0026#34; + Keys.ENTER) # 定位搜索框 SearchInput = driver.find_element(By.NAME, \u0026#34;q\u0026#34;) # 搜索框中输入selenium SearchInput.send_keys(\u0026#34;selenium\u0026#34;) # 清除输入的内容 SearchInput.clear() 警告框的处理 # 点击按钮弹出警告框 driver.find_element(By.LINK_TEXT, \u0026#34;See a sample confirm\u0026#34;).click() # 等待弹出 wait.until(expected_conditions.alert_is_present()) # 存储到变量中 alert = driver.switch_to.alert # 保存警告框的内容 text = alert.text # 按下取消按钮 alert.dismiss() # 按下按钮弹出提示框 driver.find_element(By.LINK_TEXT, \u0026#34;See a sample prompt\u0026#34;).click() # 等待显示 wait.until(expected_conditions.alert_is_present()) # 保存对象 alert = Alert(driver) # 发送文字内容给提示框 alert.send_keys(\u0026#34;Selenium\u0026#34;) # 按下确定按钮 alert.accept() frame页面的处理 # 方法一：定位frame对象 iframe = driver.find_element(By.CSS_SELECTOR, \u0026#34;#modal \u0026gt; iframe\u0026#34;) # 切换到选择的 iframe driver.switch_to.frame(iframe) # 单击frame中的按钮 driver.find_element(By.TAG_NAME, \u0026#39;button\u0026#39;).click() # 方法二：也可以通过 frame的id 切换到buttonframe框架 driver.switch_to.frame(\u0026#39;buttonframe\u0026#39;) # 方法三：基于索引切换到第 2 个 iframe iframe = driver.find_elements(By.TAG_NAME,\u0026#39;iframe\u0026#39;)[1] # 切换到选择的 iframe driver.switch_to.frame(iframe) # 离开frame切回到默认内容 driver.switch_to.default_content() 关于浏览器窗口的操作比较多，可以自行到官方网址进行学习\rhttps://www.selenium.dev/zh-cn/documentation/webdriver/interactions/windows/\r。常用的操作有：\n# 窗口最大化 driver.maximize_window() # 窗口最小化 driver.minimize_window() # 全屏幕截图 driver.save_screenshot(\u0026#39;./image.png\u0026#39;) # 对某个元素截图 ele = driver.find_element(By.CSS_SELECTOR, \u0026#39;h1\u0026#39;) ele.screenshot(\u0026#39;./image.png\u0026#39;) # 执行js脚本 header = driver.find_element(By.CSS_SELECTOR, \u0026#34;h1\u0026#34;) # 执行脚本以获得header元素的文本内容 driver.execute_script(\u0026#39;return arguments[0].innerText\u0026#39;, header) # 其他js脚本例子： lessonName = browser.execute_script(\u0026#34;return document.getElementsByClassName(\u0026#39;function-desc-text-desc\u0026#39;\u0026#39;)[0].textContent\u0026#34;) # 又如查询视频时长： js = \u0026#39;\u0026#39;\u0026#39; var vd = document.querySelector(\u0026#34;video\u0026#34;); return vd.duration; \u0026#39;\u0026#39;\u0026#39; duration = browser.execute_script(js) ","date":"2023-05-28T21:21:47+08:00","permalink":"//localhost:1313/post/tech/python/selenium4/","section":"post","tags":["python"],"title":"Selenium4使用方法小结"},{"categories":["tech"],"contents":"CloudFlare Pages 向免费用户提供了无限的站点数、请求数和带宽，除此之外付费用户可以获得更多的构建次数和同时构建站点数。声称Pages are super fast, always up to date, and deployed directly from your Git provider. 1.创建项目 两种方式：连接Git账户或者直接上传文件，并设置仓库。 2.设置变量并部署 在环境变量设置中添加一个变量：\nHUGO_VERSION，值为：0.92.0。 当然，版本号可以根据自己的情况设置。\n","date":"2023-03-31T21:59:44+08:00","permalink":"//localhost:1313/post/tech/cloudflarepages/","section":"post","tags":["Hugo"],"title":"使用Cloudflare的Pages托管Github的Hugo静态页面"},{"categories":["life"],"contents":" 牛年除夕，气温7℃，雨一早开始就淅淅沥沥没停过。第一次独自过除夕，准备了水果、棉被和电脑，意外的是，加班餐里放的盐似乎也太过了，印象深刻。\n一次问儿子，“你怎么定义春节？春节让你想起什么？”他回答的是“有好吃的、红彤彤、看电视”，我说好像还不准确。我觉得他的答案应该会随着生活而逐渐丰富吧。\n当独处的时候，回忆就会慢慢浮上心头。 春晚+鞭炮似乎是中国春节的标志，现在鞭炮🧨少了些，春晚依旧在荧幕上，想起小时候为了看到零点钟声那一刻，自己早早就上床睡饱觉，醒来后填饱肚子，摆上椅子，披上父亲的大衣，催促着忙碌的老妈收拾完手里的家务，一家人聚精会神地盯着电视机，厅堂里飘动的茉莉花茶香味和酒味，欢声笑语，家长里短，零点时院子里震耳的鞭炮声，都随着一帧一帧节目一起刻入记忆中，真是非常满意幸福的时刻。\n现在有了自己的家庭，每年都张罗过节的事情，每次都想跟孩子们安静地多待一会儿，但是总不能如意😔。每每被他们的顽皮弄得头疼的时候就想着他们快快长大快快成熟起来，但是内心又希望时光慢慢走，希望孩子们永远停留在顽皮天真的年纪，永远是那样稚嫩的声音叫爸爸妈妈。如此，父母也不会那么快地老去，他们可以尽情的宠溺自己的孙子，可以继续轻松地把孙子顶在自己肩头。\n时光啊，让人又爱又恨。\n您的浏览器不支持 video 标签。\r除夕夜的晚餐\n","date":"2022-01-31T18:43:17+08:00","permalink":"//localhost:1313/post/life/2022springnight/","section":"post","tags":["春节"],"title":"2022年特别的除夕夜"},{"categories":["life"],"contents":"\r每次拍照都要搞怪的哥哥\n女儿七岁生日，许了一个clear的愿望：希望哥哥在家不要捣乱。 真是对哥哥要求很高啊，明知她哥做不到。\n生日当天虽然是礼拜六，但是我工作到下午3点才收工，回到家烹饪了长寿面，甜点做了蛋挞和双皮奶。\n孩子们一顿饱餐之后，待看到桌上漂亮的巧克力蛋糕，便纷纷把嘴边剩下的蛋挞推给我😂，好像很有孝心。\n有意思的是，女儿最想要的生日礼物竟然是————一个更大的饭碗。。。。。。 好吧，无法阻挡的吃货。第二天老婆就带她去选购了一个。\n特别的吃蛋挞方法\n美味蛋挞\n看着新碗乐呵呵\n碗真的很大欸，D=17cm\n","date":"2022-01-23T22:27:34+08:00","permalink":"//localhost:1313/post/life/daughterbirthday/","section":"post","tags":["gift","birthday","photo"],"title":"小女儿七岁生日咯"},{"categories":["life"],"contents":"一、披薩饼底配方 1.日常使用的配方之一，可根據需要分爲兩份量。 高筋麵粉 200g 即發乾酵母 2g 細砂糖 5g 鹽 3g 牛奶 124g 橄欖油 5g 2.網絡列出的配方之二，可以參考。 二、薑撞奶配方 Ginger Milk Curd 做了兩次，貌似倆娃不太愛薑汁的味道，言太辣。\n熱牛奶 125ml 加熱至75℃—80℃ 鮮薑汁 5ml 薑汁做法： 鮮薑 120g 糖 一大勺 腌製20分鐘 準備牛奶500ml，奶粉半勺。牛奶到達溫度后，迅速冲入盛有薑汁的碗中，不要攪拌，靜置30分鐘即可成型。\n三、記錄一下網綫接駁方法 568B水晶頭接綫\n","date":"2022-01-02T17:52:55+08:00","permalink":"//localhost:1313/post/life/2022newyear/","section":"post","tags":["life","food"],"title":"2022來到了，慢慢品味生活🍕"},{"categories":["tech"],"contents":"Delphi中的BPL文件类似于windows中DLL文件，可以封装完整的VCL和其他函数。如在开发使用中采用“主程序”+“bpl”模式，不仅可以大大减少主程序的体积，还能将各功能模块 分布开发，提高同步开发的速度。另外，如后期需要更改个别功能时仅要修改对应的bpl文件即可，而不必重新编译发布整个程序文件。\n测试用的VCL程序主要属性 测试使用的是Delphi 10.2和windows10系统 添加一个Mainmenu和Panel，Panel设置为align=alClient，Mainmenu添加一个菜单“Open BPL Form”用于激活子窗口。 新建一个Package包，命名为“bplForm.bpl”； bplForm.bpl包中添加一个Form，主要属性如下：align=alClient，BorderSytle=bsNone，WIndowState=wsMaximized。界面上放置一个Button，用于实现关闭功能，其他组件随便添加。 各主要功能代码 bplForm.bpl中的Form2如下：\nprocedure TForm2.Button1Click(Sender: TObject);\rbegin\rclose;\rend;\rprocedure TForm2.FormClose(Sender: TObject; var Action: TCloseAction);\rbegin\rAction := caFree;\rend;\rinitialization\rRegisterClass(TForm2);\rfinalization\rUnRegisterClass(TForm2);\rFreeAndNil(Form2); 主程序中代码如下： 1.private中定义动态装载包的过程：\nprocedure LoadMDIForm(BplFile, TFrmName : String); 2.其他如下\nvar\rForm1: TForm1;\rimplementation\r{$R *.dfm}\r//声明一些全局变量\rvar\rBPLHandle : Cardinal;//HModule;\rAForm : TForm;\rLoadedBplFileName : String;\r{ TForm1 }\rprocedure TForm1.BplForm1Click(Sender: TObject);\rbegin\r// 动态装载包\rLoadMDIForm(\u0026#39;bplForm.bpl\u0026#39; , \u0026#39;TForm2\u0026#39;);\rend;\rprocedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);\rbegin\r// 关闭主程序时，清理包\rif BPLHandle \u0026lt;\u0026gt; 0 then\rbegin\rUnRegisterModuleClasses(BPLHandle);\rUnloadPackage(BPLHandle); //卸载包\rend;\rend;\rprocedure TForm1.FormCreate(Sender: TObject);\rbegin\rLoadedBplFileName := \u0026#39;\u0026#39;;\rend;\rprocedure TForm1.LoadMDIForm(BplFile, TFrmName: String);\rvar\rAClass : TClass;\rbegin\rif Not FileExists(ExtractFilePath(paramstr(0)) + BplFile) then\rbegin\rApplication.MessageBox(PChar(\u0026#39;找不到文件 \u0026#39; + BplFile) , \u0026#39;MSG\u0026#39;, MB_OK);\rExit;\rend;\rTry\rif (AForm \u0026lt;\u0026gt; Nil) And (AForm.Showing) then FreeAndNil(AForm);\rif LoadedBplFileName \u0026lt;\u0026gt; BplFile then\rbegin\rif BPLHandle \u0026lt;\u0026gt; 0 then\rbegin\rUnloadPackage(BPLHandle);\rBPLHandle := 0;\rend;\rBPLHandle := LoadPackage(BplFile);\rend;\rAClass := GetClass(TFrmName);\rif AClass \u0026lt;\u0026gt; nil then\rbegin\rApplication.CreateForm(TComponentClass(AClass) , AForm);\r// 将bpl中的Form嵌入到主程序中的Panel中，实现与主程序同步缩放\rAForm.parent := Form1.Panel1;\rAForm.bringToFront;\rAForm.Show;\rend;\rExcept\ron E: Exception do\rbegin\rApplication.MessageBox(PChar(\u0026#39;窗口嵌入失败！错误信息如下：\u0026#39;+#13+ E.Message ) , \u0026#39;公文管理\u0026#39;, MB_OK);\rExit;\rend;\rEnd;\rLoadedBplFileName := BplFile;\rend; 最关键的一处设置 要实现动态加载package包还需要在IDE进行一点设置，否则GetClass(TFrmName)将始终返回nil，从而无法达到预期。\n勾选“link with runtime package”为 True 在下方的“Runtime packages”中手动添加要加载的包名称，同时删除下方默认的系统包。最终如下图： 其他参考文章\rhttps://www.cnblogs.com/dingjie/articles/195195.html\r点击按钮下载本文源代码： download\r","date":"2021-03-17T19:59:31+08:00","permalink":"//localhost:1313/post/tech/delphi/embedbplform/","section":"post","tags":["delphi","bpl","download"],"title":"Delphi实现BPL窗体嵌入主程序内"},{"categories":["life"],"contents":" 2021寒假结束了，孩子们开始新的学习。\n您的浏览器不支持 video 标签。\rPluto开学前一天的自习，自学七年级的有理数部分，对于基本概念的掌握已经很不错了。 您的浏览器不支持 video 标签。\r2021.3.1 Pluto日常训练。好朋友手臂骨折了，也仍然坚持单臂训练，他还有什么理由偷懒呢。 您的浏览器不支持 video 标签。\r2021.2.28 Rose的舞蹈公开课。好像她最喜欢的就是绘画和舞蹈了，足球是被迫添加的户外运动项目咯。 2020秋 大班上学期\n2020秋 大班上学期的留影 ","date":"2021-03-01T21:06:34+08:00","permalink":"//localhost:1313/post/life/2021spring/","section":"post","tags":["family"],"title":"2021寒假结束新战役打响"},{"categories":["tech"],"contents":"Github上的文章\rthe-way-to-go_ZH_CN\r对闭包的解释为：\n匿名函数同样被称之为闭包（函数式语言的术语）：它们被允许调用定义在其它环境下的变量。闭包可使得某个函数捕捉到一些外部状态，例如：函数被创建时的状态。另一种表示方式为：一个闭包继承了函数所声明时的作用域。这种状态（作用域内的变量）都被共享到闭包的环境中，因此这些变量可以在闭包中被操作，直到被销毁。\nCSDN上的说法：闭包是匿名函数与匿名函数所引用环境的组合。匿名函数有动态创建的特性，该特性使得匿名函数不用通过参数传递的方式，就可以直接引用外部的变量。这就类似于常规函数直接使用全局变量一样，个人理解为：匿名函数和它引用的变量以及环境，类似常规函数引用全局变量处于一个包的环境。\n且看代码： package main import \u0026#34;fmt\u0026#34; func main() { var f = adder() fmt.Print(f(1), \u0026#34; - \u0026#34;) fmt.Print(f(20), \u0026#34; - \u0026#34;) fmt.Print(f(300)) fb := fib() for i := 0; i \u0026lt; 10; i++ { fmt.Println(fb()) } } func adder() func(int) int { var x int return func(delta int) int { x += delta return x } } func fib() func() int { var a int = 0 var b int = 1 return func() int { c := a a = b b = a + c return c } } 运行结果如下：\n1 - 21 - 3210 1 1 2 3 5 8 13 21 34 上面函数中，每调用一次 f，系统就执行一次func(delta int) int，而func adder()函数中的x的值也被更新一次。第二个斐波那契数列函数也是如此，每循环一次，函数fb()就执行一次，执行时将内部数值和外部函数的a、b更新（相当于暂存起来），每次执行后就返回前面累加后的结果c。\n","date":"2021-03-01T20:18:56+08:00","permalink":"//localhost:1313/post/tech/go/go-closure/","section":"post","tags":["go"],"title":"Go中闭包的简单使用"},{"categories":["tech"],"contents":"近期偶然對\rGo\r語言產生了興趣，於是初略學習了一下，感覺確實非常犀利。\nGo 于 2009 年由谷歌开发完成。它解决了一个问题，创建出一种没有 C++等语言的过重包袱和过分设计的语言。 这使得 Go 在性能和速度上都有极大提升，使用 Go 工作成为一件乐事。\n此外，大部分第一次使用 Go 语言的开发者不会感觉到不便，因为 Go 中的熟悉元素及其易用性构成了一项惊喜。这并不是说 Go 语言在所有情况下都是完美的。 虽然它将速度和优雅度提升到新的层次，但也舍弃了一些用户期望的功能。比如，它不具备大量库，也不支持继承。此外，它没有 GUI 库，也不支持对象导向的编程。Go 语言的特点表明它具备轻量级线程实现（Goroutine）、智能标准库、强大的内置安全性，且可使用最简语法进行编程。\n官網上的介紹：\nGo is an open source programming language that makes it easy to build simple, reliable, and efficient software.\n知乎上有文章進行了Python和Go詳細對比分析，感興趣的可以\r查看原文\r。\n小測試 編寫了一個計算1w以内素數的脚本，對比Python和Go的耗時情況。\nGo脚本，運行基本在 50 毫秒左右。 package prime import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) // GetPrime 用于计算素数 func GetPrime() int { fmt.Println(\u0026#34;start\u0026#34;) /* 素数：打印2-100内的素数。只能被2和本身整除。 */ t := time.Now() countsum := 0 for i := 2; i \u0026lt;= 10000; i++ { count := 0 //用于统计i被整除的次数 for j := 2; j \u0026lt; i; j++ { if i%j == 0 { count++ break } } // fmt.Println(count) if count == 0 { // fmt.Println(i, \u0026#34;是素数\u0026#34;) countsum++ } } elapsed := time.Since(t) fmt.Println(\u0026#34;app elapsed:\u0026#34;, elapsed) return countsum } Python脚本，運行基本在 660 毫秒左右。 # -*- coding:utf-8 -*- \u0026#39;\u0026#39;\u0026#39; 求 n 以内的素数个数，并获得耗时 \u0026#39;\u0026#39;\u0026#39; import datetime import time t1 = datetime.datetime.now().microsecond t3 = time.mktime(datetime.datetime.now().timetuple()) prm_lst = [] def get_prime(num0): rst = False if num0\u0026lt;=1: # print(\u0026#39;这不是质数\u0026#39;) rst = False elif num0==2: # print(\u0026#39;这是一个质数!\u0026#39;) rst = True else: i=2 while i\u0026lt;num0: if num0%i==0: # print(\u0026#39;这不是一个质数\u0026#39;) break i=i+1 else: # print (\u0026#39;这是一个质数!\u0026#39;) rst = True return rst for i in range(0, 10000): if get_prime(i): prm_lst.append(i) t2 = datetime.datetime.now().microsecond t4 = time.mktime(datetime.datetime.now().timetuple()) strTime = \u0026#39;funtion time use:%dms\u0026#39; % ((t4 - t3) * 1000 + (t2 - t1) / 1000) print(len(prm_lst), strTime) 總結 以上對比可見，個人覺得 Go 性能確實優越（本人業餘水平，測試不一定專業嚴謹）。而且在計算100w級別的時候二者差異更是明顯。\n我此前學習的是Delphi，後來自學Python，現在來學習Go語言，覺得一些基本感念比較容易理解。以後有時間再深入學習吧。\n","date":"2021-02-24T20:20:27+08:00","permalink":"//localhost:1313/post/tech/gofirst/","section":"post","tags":["golang"],"title":"Go語言初見"},{"categories":["tech"],"contents":"腾讯云的TC3 v3鉴权比较复杂，当然这是相对于Delphi下而言，其实在Python下直接使用SDK要省事儿的多。本文的源代码就不贴了，需要的可以去原文下载。\n参考了\r高文杰\r先生的代码，该代码使用的接口是旧版，目前仍可正常使用，我结合自己的学习增添了最新TC3-HMAC-SHA256 V3版本的鉴权接口。本文最后提供了源码及编译成品。\n一、TC3鉴权单元 为了方便复用，写了一个TC3鉴权单元文件：TC3_Authorization.pas：\n{\r2021-02-15\r广西南宁\r张旭州\r腾讯云 TC3-HMAC-SHA256 生成鉴权数据\r}\runit TC3_Authorization;\rinterface\ruses\rSystem.SysUtils, System.hash, System.NetEncoding, System.DateUtils;\r{ -------------------------------------------------------------------------------\r过程名: genTC3Auth\r作者: 张旭州\r日期: 2021.02.15\r参数: SecretKey, SecretId, sDomain, bodyJSON, Service: string\r参数说明： AccessKeyID，AccessKeySecret，域名, 待发送的数据主体JSON， 服务ocr, cvm\r返回值: string\r参数参考如下：\rSecretKey := \u0026#39;您的腾讯云SecretKey\u0026#39;;\rSecretId := \u0026#39;您的腾讯云SecretId\u0026#39;;\rService := \u0026#39;sms\u0026#39; //发送短信\rsDomain := \u0026#39;sms.tencentcloudapi.com\u0026#39; //短信发送的域名\r------------------------------------------------------------------------------- }\rfunction genTC3Auth(SecretKey, SecretId, sDomain, bodyJSON, Service: string): string;\rimplementation\rfunction DateTimeToUnix(const AValue: TDateTime): Int64;\r// 日期转Unix时间戳\rbegin\rResult := System.DateUtils.DateTimeToUnix(AValue) - 8 * 60 * 60;\rend;\r//腾讯云TC3 V3签名鉴权\rfunction genTC3Auth(SecretKey, SecretId, sDomain, bodyJSON, Service: string): string;\rvar\rhttpRequestMethod: string; // = \u0026#34;POST\u0026#34;;\rcanonicalUri: string; //= \u0026#34;/\u0026#34;;\rcanonicalQueryString: string; //= \u0026#34;\u0026#34;;\rcanonicalHeaders: string; // = \u0026#34;content-type:application/json; charset=utf-8\\n\u0026#34; + \u0026#34;host:\u0026#34; + host + \u0026#34;\\n\u0026#34;;\rsignedHeaders: string; //= \u0026#34;content-type;host\u0026#34;;\rSecretDate, SecretService, SecretSigning, Signature: TBytes;\rStringToSign, payload, CanonicalRequest, HashedRequestPayload, HashedCanonicalRequest: string;\rsDate,timestamp : string;\rAuthorization, CredentialScope : string;\rbegin\rsDate := FormatDateTime(\u0026#39;YYYY-MM-DD\u0026#39;, now());\rtimestamp := DateTimeToUnix(now).ToString;\rhttpRequestMethod := \u0026#39;POST\u0026#39;;\rcanonicalUri := \u0026#39;/\u0026#39;;\rcanonicalQueryString := \u0026#39;\u0026#39;;\rcanonicalHeaders := \u0026#39;content-type:application/json\u0026#39; + #10\r+ \u0026#39;host:\u0026#39; + sDomain + #10;\rsignedHeaders := \u0026#39;content-type;host\u0026#39;;\rpayload := bodyJSON;\r//待发送的数据的哈希值:\rHashedRequestPayload := THashSHA2.GetHashString(payload);\r//拼接规范请求串\rCanonicalRequest := httpRequestMethod + #10\r+ canonicalUri + #10\r+ canonicalQueryString + #10\r+ canonicalHeaders + #10\r+ signedHeaders + #10\r+ HashedRequestPayload;\r//计算派生签名密钥\rSecretDate := THashSHA2.GetHMACAsBytes(sDate, TEncoding.utf8.GetBytes(\u0026#39;TC3\u0026#39; + SecretKey));\rSecretService := THashSHA2.GetHMACAsBytes(Service, SecretDate);\rSecretSigning := THashSHA2.GetHMACAsBytes(\u0026#39;tc3_request\u0026#39;, SecretService);\r//规范请求串的哈希值\rHashedCanonicalRequest := THashSHA2.GetHashString(CanonicalRequest);\r//组装待签名字符串\rStringToSign := \u0026#39;TC3-HMAC-SHA256\u0026#39; + #10\r+ timestamp + #10\r+ sDate + \u0026#39;/\u0026#39; + Service + \u0026#39;/tc3_request\u0026#39; + #10\r+ HashedCanonicalRequest;\r//计算签名\rSignature := THashSHA2.GetHMACAsBytes(Bytesof(StringToSign), SecretSigning);\r// Application.MessageBox(PChar(THash.DigestAsString(Signature)),\r// \u0026#39;提示\u0026#39;, MB_OK + MB_ICONINFORMATION + MB_TOPMOST);\rCredentialScope := sDate + \u0026#39;/\u0026#39; + Service + \u0026#39;/tc3_request\u0026#39;;\r//拼接 Authorization\rAuthorization :=\r\u0026#39;TC3-HMAC-SHA256\u0026#39; + \u0026#39; \u0026#39; +\r\u0026#39;Credential=\u0026#39; + SecretId + \u0026#39;/\u0026#39; + CredentialScope + \u0026#39;, \u0026#39; +\r\u0026#39;SignedHeaders=\u0026#39; + SignedHeaders + \u0026#39;, \u0026#39; +\r\u0026#39;Signature=\u0026#39; + StringReplace(PChar(THash.DigestAsString(Signature)), Chr(13) + Chr(10), \u0026#39;\u0026#39;,\r[rfReplaceAll]);\rResult := Authorization;\rend;\rend. 二、、短信发送模块 在implementation下\nuses\rUnit2, TC3_Authorization; procedure TForm1.btn_tc3_sendClick(Sender: TObject);\rvar\rstrMobile, SecretKey, SecretId,sdkappid,sign, params, tpl_id, strjson:string;\rtc3 : string;\rurl : string;\rhttp : TIdHTTP;\rjsonToSend : TStringStream;\rAresult:string;\r//申明变量\rRoot:TJSONObject; //uses System.JSON;\rjsonArray: TJSONArray; // JSON数组变量\rlist : TStringList;\ri : Integer;\rphoneSet : string;\rbegin\rif (trim(edt_key.Text) = \u0026#39;\u0026#39;) or (Trim(edt_id.Text)=\u0026#39;\u0026#39;) then\rbegin\rShowMessage(\u0026#39;使用TC3鉴权方式发送需要提供腾讯云账户的Key和Id\u0026#39;);\rexit;\rend;\rSecretKey := trim(edt_key.Text);\rSecretId := Trim(edt_id.Text);\rlist := TStringList.Create;\rlist.CommaText := edt_strMobile.Text;\rfor i := 0 to list.Count -1 do\rbegin\rphoneSet := phoneSet + \u0026#39;\u0026#34;86\u0026#39; + list[i] + \u0026#39;\u0026#34;,\u0026#39;\rend;\rstrMobile := phoneSet.Remove(Length(phoneSet)-1);\rlist.Free;\rsdkappid := edt_sdkappid.Text;\rsign := edt_sign.Text;\rparams := edt_params.Text;\rtpl_id := edt_tpl_id.Text;\rstrjson := \u0026#39;{\u0026#39;\r+ \u0026#39;\u0026#34;PhoneNumberSet\u0026#34;:[\u0026#39;\r+ strMobile\r+ \u0026#39;],\u0026#39;\r+ \u0026#39;\u0026#34;TemplateParamSet\u0026#34;:\u0026#39; + params\r+ \u0026#39;,\u0026#39;\r+ \u0026#39;\u0026#34;TemplateID\u0026#34;:\u0026#34;\u0026#39;\r+ tpl_id\r+ \u0026#39;\u0026#34;,\u0026#39;\r+ \u0026#39;\u0026#34;SmsSdkAppid\u0026#34;:\u0026#34;\u0026#39;\r+ sdkappid\r+ \u0026#39;\u0026#34;,\u0026#39;\r+ \u0026#39;\u0026#34;Sign\u0026#34;:\u0026#34;\u0026#39;\r+ sign\r+\u0026#39;\u0026#34;}\u0026#39;;\rtc3 := TC3_Authorization.genTC3Auth(SecretKey, SecretId, \u0026#39;sms.tencentcloudapi.com\u0026#39;,\rstrjson, \u0026#39;sms\u0026#39;);\rurl := \u0026#39;https://sms.tencentcloudapi.com/\u0026#39;;\rhttp := TIdHttp.Create(nil);\rhttp.HandleRedirects := True;\rhttp.ReadTimeout := 3000;\rhttp.Request.ContentType := \u0026#39;application/json\u0026#39;;//设置内容类型为json\rjsonToSend := TStringStream.Create(strjson, TEncoding.UTF8);\rjsonToSend.Position := 0;//将流位置置为0\rhttp.Request.CustomHeaders.Clear;\rhttp.Request.CustomHeaders.AddValue(\u0026#39;Authorization\u0026#39;, \u0026#39; \u0026#39; + tc3);\rhttp.Request.CustomHeaders.AddValue(\u0026#39;Content-Type\u0026#39;, \u0026#39; application/json\u0026#39;);\rhttp.Request.CustomHeaders.AddValue(\u0026#39;Host\u0026#39;, \u0026#39; sms.tencentcloudapi.com\u0026#39;);\rhttp.Request.CustomHeaders.AddValue(\u0026#39;X-TC-Action\u0026#39;, \u0026#39; SendSms\u0026#39;);\rhttp.Request.CustomHeaders.AddValue(\u0026#39;X-TC-Timestamp\u0026#39;, \u0026#39; \u0026#39; + gwj_DateTimeToUnix(now).ToString);\rhttp.Request.CustomHeaders.AddValue(\u0026#39;X-TC-Version\u0026#39;, \u0026#39; 2019-07-11\u0026#39;);\rhttp.Request.AcceptCharSet := \u0026#39;UTF-8\u0026#39;;\rhttp.Request.AcceptEncoding := \u0026#39;UTF-8\u0026#39;;\rhttp.Request.AcceptLanguage := \u0026#39;UTF-8\u0026#39;;\rhttp.Request.CharSet := \u0026#39;UTF-8\u0026#39;;\r// http.HTTPOptions := IdHTTP.HTTPOptions + [hoKeepOrigProtocol];\rAresult := http.Post(url, jsonToSend);//用MEMO控件接收POST后的数据返回\rAresult := UnicodeToChinese(Aresult);\rMemo1.Text := Aresult;\rjsonToSend.free;\rhttp.free;\r//发送成功的示例\r//{\u0026#34;Response\u0026#34;:{\u0026#34;SendStatusSet\u0026#34;:[{\u0026#34;SerialNo\u0026#34;:\u0026#34;2019:2892974270720676287\u0026#34;,\u0026#34;PhoneNumber\u0026#34;:\u0026#34;+8613377131696\u0026#34;,\u0026#34;Fee\u0026#34;:1,\u0026#34;SessionContext\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Code\u0026#34;:\u0026#34;Ok\u0026#34;,\u0026#34;Message\u0026#34;:\u0026#34;send success\u0026#34;,\u0026#34;IsoCode\u0026#34;:\u0026#34;CN\u0026#34;}],\u0026#34;RequestId\u0026#34;:\u0026#34;b2e1fdcb-e877-4bbe-89cc-e7cae7cb567d\u0026#34;}}\rRoot:= TJSONObject.ParseJSONValue(Trim(Aresult)) as TJSONObject; //uses System.JSON;\rRoot := Root.GetValue(\u0026#39;Response\u0026#39;) as TJSONObject;\rjsonArray := Root.GetValue(\u0026#39;SendStatusSet\u0026#39;) as TJSONArray ;\rRoot := jsonArray.Get(0) as TJSONObject; //第一个号码结果\redt_result.Text := Root.GetValue(\u0026#39;Code\u0026#39;).Value;\redt_errmsg.Text := Root.GetValue(\u0026#39;Message\u0026#39;).Value;\redt_ext.Text := Root.GetValue(\u0026#39;SessionContext\u0026#39;).Value;\rend; 点击按钮下载本文源代码： download\r","date":"2021-02-16T22:09:20+08:00","permalink":"//localhost:1313/post/tech/delphi/delphi-tc3-hmac/","section":"post","tags":["delphi","hmac","sms","tencent","download"],"title":"Delphi调用腾讯云TC3-HMAC-SHA256鉴权接口v3发送短信"},{"categories":["tech"],"contents":"\rFlask-WTF\r提供了WTForms的功能集成，使用该模块能快捷创建表单页面，包含有 Flask 和 WTForms， 集成了 CSRF， file upload 以及 reCAPTCHA.。目前版本为0.14.3，使用说明文档在\rhttps://flask-wtf.readthedocs.io/en/stable/\r。\n具体功能如下:\n集成 wtforms。 带有 csrf 令牌的安全表单。 全局的 csrf 保护。 支持验证码（Recaptcha）。 与 Flask-Uploads 一起支持文件上传。 国际化集成。 安装方法 pip install Flask-WTF 创建表单 from flask_wtf import Form from wtforms import StringField from wtforms.validators import DataRequired class MyForm(Form): name = StringField(\u0026#39;name\u0026#39;, validators=[DataRequired()]) 另外，隐藏的 CSRF 令牌会被自动地创建。你可以在模板这样地渲染它:\n\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/\u0026#34;\u0026gt; {{ form.csrf_token }} {{ form.name.label }} {{ form.name(size=20) }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Go\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 尽管如此，为了创建有效的 XHTML/HTML， Form 类有一个 hidden_tag 方法， 它在一个隐藏的 DIV 标签中渲染任何隐藏的字段，包括 CSRF 字段:\n\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/\u0026#34;\u0026gt; {{ form.hidden_tag() }} {{ form.name.label }} {{ form.name(size=20) }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Go\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 验证表单 在你的视图处理程序中验证请求:\n@app.route(\u0026#39;/submit\u0026#39;, methods=(\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;)) def submit(): form = MyForm() if form.validate_on_submit(): return redirect(\u0026#39;/success\u0026#39;) return render_template(\u0026#39;submit.html\u0026#39;, form=form) 注意你不需要把 request.form 传给 Flask-WTF；Flask-WTF 会自动加载。便捷的方法 validate_on_submit 将会检查是否是一个 POST 请求并且请求是否有效。\n一个使用fetch查询结果的WTF实例 前端页面 index.html： \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; {{ form.csrf_token }} {{ form.state }} {{ form.city }} \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; var state_select = document.getElementById(\u0026#34;state\u0026#34;); var city_select = document.getElementById(\u0026#34;city\u0026#34;); state_select.onchange = function() { state = state_select.value; fetch(\u0026#39;/city/\u0026#39; + state).then(function(response) { response.json().then(function(data) { var optionHTML = \u0026#39;\u0026#39;; for (var city of data.cities) { optionHTML += \u0026#39;\u0026lt;option value=\u0026#34;\u0026#39; + city.id + \u0026#39;\u0026#34;\u0026gt;\u0026#39; + city.name + \u0026#39;\u0026lt;/option\u0026gt;\u0026#39;; } city_select.innerHTML = optionHTML; }) }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 服务器后台视图 app.py: from flask import Flask, render_template, request, jsonify from flask_sqlalchemy import SQLAlchemy from flask_wtf import FlaskForm from wtforms import SelectField app = Flask(__name__) app.config[\u0026#39;SQLALCHEMY_DATABASE_URI\u0026#39;] = \u0026#39;sqlite:///test.db\u0026#39; app.config[\u0026#39;SECRET_KEY\u0026#39;] = \u0026#39;secret\u0026#39; db = SQLAlchemy(app) class City(db.Model): id = db.Column(db.Integer, primary_key=True) state = db.Column(db.String(2)) name = db.Column(db.String(50)) class Form(FlaskForm): state = SelectField(\u0026#39;state\u0026#39;, choices=[(\u0026#39;CA\u0026#39;, \u0026#39;California\u0026#39;), (\u0026#39;NV\u0026#39;, \u0026#39;Nevada\u0026#39;)]) city = SelectField(\u0026#39;city\u0026#39;, choices=[]) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def index(): form = Form() form.city.choices = [(city.id, city.name) for city in City.query.filter_by(state=\u0026#39;CA\u0026#39;).all()] if request.method == \u0026#39;POST\u0026#39;: city = City.query.filter_by(id=form.city.data).first() return \u0026#39;\u0026lt;h1\u0026gt;State: {}, City: {}\u0026lt;/h1\u0026gt;\u0026#39;.format(form.state.data, city.name) return render_template(\u0026#39;index.html\u0026#39;, form=form) @app.route(\u0026#39;/city/\u0026lt;state\u0026gt;\u0026#39;) def city(state): cities = City.query.filter_by(state=state).all() cityArray = [] for city in cities: cityObj = {} cityObj[\u0026#39;id\u0026#39;] = city.id cityObj[\u0026#39;name\u0026#39;] = city.name cityArray.append(cityObj) return jsonify({\u0026#39;cities\u0026#39; : cityArray}) if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True,host=\u0026#34;0.0.0.0\u0026#34;) ","date":"2021-01-30T08:21:07+08:00","permalink":"//localhost:1313/post/tech/python/flask-wtf-with-fetch/","section":"post","tags":["flask","python","jquery"],"title":"Flask动态切换选项并通过Fetch查询显示"},{"categories":["tech"],"contents":"SQLAlchemy 是flask中必备的库，能操作各种关系数据库。数据库映射的方法在\r廖雪峰\r的官方网站上有具体例子。本文主要是记录一下SQLAlchemy通过 session 对象执行查询的各种 query 方法。\n遍历 for user in session.query(User).order_by(User.id): print(user.name, user.fullname) 执行结果： ed Ed Jones wendy Wendy Williams mary Mary Contrary fred Fred Flinstone 或者：\nfor name, fullname in session.query(User.name, User.fullname): print(name, fullname) # 执行结果： ed Ed Jones wendy Wendy Williams mary Mary Contrary fred Fred Flinstone 再看一个例子：\nfor name in session.query(User.name): print(name) # 执行结果： (\u0026#39;ed\u0026#39;,) (\u0026#39;wendy\u0026#39;,) (\u0026#39;mary\u0026#39;,) (\u0026#39;fred\u0026#39;,) 这时，返回结果为元组。\n设置别名 给返回的结果起一个别名（label）：\nfor row in session.query(User.name.label(\u0026#39;name_label\u0026#39;)).all(): print(row.name_label) # 执行结果： ed wendy mary fred 给数据表对象设置别名（aliased）：\nfrom sqlalchemy.orm import aliased # 把 User 别名设置为：user_alias user_alias = aliased(User, name=\u0026#39;user_alias\u0026#39;) for row in session.query(user_alias): print(row) # 执行结果： ed wendy mary fred 切片 for u in session.query(User).order_by(User.id)[1:3]: print(u) # 执行结果： wendy mary 查询 查询，也就是 SQL 的 where 子句。在 SQLAlchemy 中，query 的查询可以通过 filter_by 或 filter 来实现。\n1.使用 filter_by：\nfor name, in session.query(User.name).\\ filter_by(fullname=\u0026#39;Ed Jones\u0026#39;): print(name) # 执行结果： ed 2.使用 filter：\nfor name, in session.query(User.name).\\ filter(User.fullname==\u0026#39;Ed Jones\u0026#39;): print(name) # 执行结果： ed 运算符 等于： query.filter(User.name == \u0026#39;ed\u0026#39;) 不等于 query.filter(User.name != \u0026#39;ed\u0026#39;) LIKE 运算符： # 查询所有 \u0026#34;e\u0026#34; 开头的 name for user in session.query(User).\\ filter(User.name.like(\u0026#34;e%\u0026#34;)): print(user) # 执行结果： ed IN 运算符： for user in session.query(User).\\ filter(User.name.in_([\u0026#39;ed\u0026#39;, \u0026#39;wendy\u0026#39;, \u0026#39;jack\u0026#39;])): print(user) # 执行结果： ed wendy NOT IN 运算符： for user in session.query(User).\\ filter(~User.name.in_([\u0026#39;ed\u0026#39;, \u0026#39;wendy\u0026#39;, \u0026#39;jack\u0026#39;])): print(user) # 执行结果： mary fred IS NULL 运算符： query.filter(User.name == None) query.filter(User.name.is_(None)) IS NOT NULL 运算符： query.filter(User.name != None) query.filter(User.name.isnot(None)) AND 运算符： 方法1：\nfrom sqlalchemy import and_ for user in session.query(User).\\ filter(and_(User.name == \u0026#39;ed\u0026#39;, User.fullname == \u0026#39;Ed Jones\u0026#39;)): print(user) # 执行结果： ed 方法2：\nfor user in session.query(User).\\ filter(User.name == \u0026#39;ed\u0026#39;, User.fullname == \u0026#39;Ed Jones\u0026#39;): print(user) 方法3：\nfor user in session.query(User).\\ filter(User.name == \u0026#39;ed\u0026#39;).\\ filter(User.fullname == \u0026#39;Ed Jones\u0026#39;): print(user) OR 运算符： from sqlalchemy import or_ for user in session.query(User).\\ filter(or_(User.name == \u0026#39;ed\u0026#39;, User.name == \u0026#39;wendy\u0026#39;)): print(user) # 执行结果： ed wendy query 包含的方法 all() ： 返回一个包含所有对象的 list\nu = session.query(User).all() print(u) # 执行结果： [\u0026lt;__main__.User object at 0x033DA410\u0026gt;, \u0026lt;__main__.User object at 0x033DA470\u0026gt;, \u0026lt;__main__.User object at 0x033DA4B0\u0026gt;, \u0026lt;__main__.User object at 0x033DA510\u0026gt;] first() ： 返回结果的第一个对象 u = session.query(User).first() print(u) # 执行结果： ed one() ： 返回结果的实例对象\nu = session.query(User).filter(User.id == 1).one() print(u) print(u.fullname) # 执行结果： ed Ed Jones 如果有多个结果返回，使用 one() 将会报错：\nu = session.query(User).one() # 错误信息 Traceback (most recent call last): ... MultipleResultsFound: Multiple rows were found for one() 如果查找的对象不存在，也会报错：\nu = session.query(User).filter(User.id == 99).one() # 错误信息 Traceback (most recent call last): ... NoResultFound: No row was found for one() 我们可以用 one_or_none() 来处理对象未必存在的情况：\nu = session.query(User).filter(User.id == 99).one_or_none() print(u) # 执行结果： None 使用 scalar() 方法，返回结果的第一列的数值：\nu = session.query(User.id).filter(User.name == \u0026#39;wendy\u0026#39;).scalar() print(u) # 执行结果： 2 文本化 SQL 使用 text() 方法可以用文本化的方式执行查询，使得语法更灵活，多数方法都支持这种文本化的方式，比如：filter() 和 order_by()。\nfrom sqlalchemy import text # 筛选 id\u0026lt;3 再根据 id 排序 for user in session.query(User).\\ filter(text(\u0026#34;id\u0026lt;3\u0026#34;)).\\ order_by(text(\u0026#34;id\u0026#34;)).all(): print(user.name) # 执行结果： ed wendy 需要用冒号传递参数时，可以用 params() 方法：\nfrom sqlalchemy import text # 筛选出 id\u0026lt;5 和 name=\u0026#39;fred\u0026#39; u = session.query(User).\\ filter(text(\u0026#34;id\u0026lt;:value and name=:name\u0026#34;)).\\ params(value=5, name=\u0026#39;fred\u0026#39;).order_by(User.id).one() print(u) # 执行结果： fred 使用 from_statement() 方法，支持直接写原生 SQL 语句：\nfrom sqlalchemy import text u = session.query(User).\\ from_statement(text(\u0026#34; SELECT * FROM users where name=\u0026#39;ed\u0026#39; \u0026#34;)).one() print(u) # 执行结果： ed 计数 返回查询结果的对象的数目。\nu = session.query(User).\\ filter(User.name.like(\u0026#39;%ed\u0026#39;)).count() print(u) # 执行结果： 2 需要单独计算某一类对象的数量，可以用 func() 和 group_by() 配合查询：\nfrom sqlalchemy import func u = session.query(User.name, func.count(User.name)).group_by(User.name).all() print(u) # 执行结果： [(\u0026#39;ed\u0026#39;, 1), (\u0026#39;fred\u0026#39;, 1), (\u0026#39;mary\u0026#39;, 1), (\u0026#39;wendy\u0026#39;, 1)] 返回查询得到的的数值，我们使用 scalar() 方法：\nu = session.query(func.count(User.id)).scalar() print(u) # 执行结果： 4 其他例子汇总 0.like:模糊查询 result0 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.like(\u0026#34;%\u0026#34; + \u0026#34;cp\u0026#34; + \u0026#34;%\u0026#34;)).all() 1.notlike：模糊查询，不在查询范围内 result1 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.notlike(\u0026#34;%\u0026#34; + \u0026#34;cp\u0026#34; + \u0026#34;%\u0026#34;)).all() 2.in_:在某个范围内，参数为元组或者列表类型的数据 result2 = db.session.query(Protocols.protocolName).filter(Protocols.id.in_((1, 2))).all() 3.notin_：和in_相反 result3 = db.session.query(Protocols.protocolName).filter(Protocols.id.notin_((1, 2))).all() 4.is_:是否为null的比较 result4 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.is_(None)).all() 5.isnot:不为null result5 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.isnot(None)).all() 6.startswith：以某个数据开头 result6 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.startswith(\u0026#34;t\u0026#34;)).all() 7.endswith：以某数据结尾 result7 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.endswith(\u0026#34;t\u0026#34;)).all() 8.contains：数据中包含，和like功能差不多 result8 = db.session.query(Protocols.protocolName).filter(Protocols.protocolName.contains(\u0026#34;cp\u0026#34;)).all() 9.desc：对查询出来的数据进行降序排序 result9 = db.session.query(Protocols.protocolName).order_by(Protocols.id.desc()).all() 10.asc：对查询出来的数据进行升序排序 result10 = db.session.query(Protocols.protocolName).order_by(Protocols.id.asc()).all() 11.between：某个字段的参数在某个范围内 result11 = db.session.query(Protocols.protocolName).filter(Protocols.id.between(1, 3)).all() 12.distinct：对查询出来的数据进行去重 result12 = db.session.query(Protocols.parent_protocol).distinct().all() ","date":"2021-01-14T09:53:16+08:00","permalink":"//localhost:1313/post/tech/python/sqlalchemy-query-cheetsheet/","section":"post","tags":["flask","python","sqlalchemy"],"title":"Sqlalchemy中Query的方法汇总"},{"categories":["tech"],"contents":"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.It provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language. 网上的很多教程和视频都是基于本地SQLite数据库进行的操作，因为我个人的项目是在MSSQL上的，所以这里对Flask使用MS SQL Server的方法进行记录。\n目标：\nMSSQL数据库存储数据 有增删改功能 使用网页模板 1. app.py # -*- coding: utf-8 -*- from flask import Flask, render_template, url_for, request, redirect from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.dialects.mssql import \\ BIGINT, BINARY, BIT, CHAR, DATE, DATETIME, DATETIME2, \\ DATETIMEOFFSET, DECIMAL, FLOAT, IMAGE, INTEGER, MONEY, \\ NCHAR, NTEXT, NUMERIC, NVARCHAR, REAL, SMALLDATETIME, \\ SMALLINT, SMALLMONEY, SQL_VARIANT, TEXT, TIME, \\ TIMESTAMP, TINYINT, UNIQUEIDENTIFIER, VARBINARY, VARCHAR from sqlalchemy import Table, MetaData, Column, Integer, String, ForeignKey from sqlalchemy.orm import mapper, sessionmaker from datetime import datetime import pymssql app = Flask(__name__) DBUser = \u0026#39;flask\u0026#39; DBPassword = \u0026#39;123\u0026#39; DBHost = \u0026#39;192.168.100.5\u0026#39; DBName = \u0026#39;test\u0026#39; engine = create_engine(f\u0026#39;mssql+pymssql://{DBUser}:{DBPassword}@{DBHost}/{DBName}\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class Flaskdemo(Base): # 指定映射表名 __tablename__ = \u0026#39;flaskdemo\u0026#39; # id 设置为主键 id = Column(\u0026#39;id\u0026#39;, Integer, primary_key=True, autoincrement=True) # 指定 name 映射到 name 字段 content = Column(\u0026#39;content\u0026#39;, String(200)) date_created = Column(\u0026#39;date_created\u0026#39;, DATETIME, default=datetime.utcnow()) # datetime.today().strftime(\u0026#34;%Y-%m-%d\u0026#34;) # 创建表 # Base.metadata.create_all(engine) # 建立会话 Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;]) def index(): if request.method == \u0026#39;POST\u0026#39;: task_content = request.form[\u0026#39;content\u0026#39;] new_task = Flaskdemo(content=task_content) try: session.add(new_task) session.commit() return redirect(\u0026#39;/\u0026#39;) except: return \u0026#39;There was an issue adding your task\u0026#39; else: tasks = session.query(Flaskdemo).all() return render_template(\u0026#39;index.html\u0026#39;, tasks=tasks) @app.route(\u0026#39;/delete/\u0026lt;int:id\u0026gt;\u0026#39;) def delete(id): task_to_delete = session.query(Flaskdemo).filter(Flaskdemo.id==id).one() try: session.delete(task_to_delete) session.commit() return redirect(\u0026#39;/\u0026#39;) except: return \u0026#39;There was a problem deleting that task\u0026#39; @app.route(\u0026#39;/update/\u0026lt;int:id\u0026gt;\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def update(id): task = session.query(Flaskdemo).filter(Flaskdemo.id==id).one() if request.method == \u0026#39;POST\u0026#39;: task.content = request.form[\u0026#39;content\u0026#39;] try: session.commit() return redirect(\u0026#39;/\u0026#39;) except: return \u0026#39;There was an issue updating your task\u0026#39; else: return render_template(\u0026#39;update.html\u0026#39;, task=task) if __name__ == \u0026#34;__main__\u0026#34;: app.run(debug=True) # 关闭 session.close() 2. index.html {% extends \u0026#39;base.html\u0026#39; %} {% block head %} \u0026lt;title\u0026gt;Task Master\u0026lt;/title\u0026gt; {% endblock %} {% block body %} \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;h1 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Task Master\u0026lt;/h1\u0026gt; {% if tasks|length \u0026lt; 1 %} \u0026lt;h4 style=\u0026#34;text-align: center\u0026#34;\u0026gt;There are no tasks. Create one below!\u0026lt;/h4\u0026gt; {% else %} \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Task\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Added\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Actions\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; {% for task in tasks %} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ task.content }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ task.date_created }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href=\u0026#34;/delete/{{task.id}}\u0026#34;\u0026gt;Delete\u0026lt;/a\u0026gt; \u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;/update/{{task.id}}\u0026#34;\u0026gt;Update\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endfor %} \u0026lt;/table\u0026gt; {% endif %} \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;/\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;content\u0026#34; id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Add Task\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} 3. update.html {% extends \u0026#39;base.html\u0026#39; %} {% block head %} \u0026lt;title\u0026gt;Task Master\u0026lt;/title\u0026gt; {% endblock %} {% block body %} \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;h1 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Update Task\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;/update/{{task.id}}\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;content\u0026#34; id=\u0026#34;content\u0026#34; value=\u0026#34;{{task.content}}\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Update\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} 4. base.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ url_for(\u0026#39;static\u0026#39;, filename=\u0026#39;css/main.css\u0026#39;) }}\u0026#34;\u0026gt; {% block head %}{% endblock %} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {% block body %}{% endblock %} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 5. main.css body, html { margin: 0; font-family: sans-serif; } .content { margin: 0 auto; width: 400px; } table, td, th { border: 1px solid #aaa; } table { border-collapse: collapse; width: 100%; } th { height: 30px; } td { text-align: center; padding: 5px; } .form { margin-top: 20px; } #content { width: 70%; } ","date":"2020-12-29T13:07:19+08:00","permalink":"//localhost:1313/post/tech/python/flask-web-app/","section":"post","tags":["python","flask","mssql"],"title":"用Flask建立一个简单的Web App"},{"categories":["tech"],"contents":"1 简介 SQLAlchemy\r是一个使用 Python 实现的 ORM 框架，它的设计理念是：SQL 数据库的量级和性能比对象集合重要，对象集合的抽象比表和行重要；它采用了类似于 Java 里 Hibernate 的数据映射模型；它的目标是提供能兼容众多数据库（如：SQLite、MySQL、Postgres、Oracle、MS-SQL、SQLServer 和 Firebird）的企业级持久性模型。\n上面提到了 ORM，那 ORM 是什么？ORM 全称 Object Relational Mapping，中文译为对象关系映射，简单的说就是在数据库与业务实体对象之间建立了一种对应关系，我们可以用操作实体对象的方式来完成数据库的操作，ORM 封装了数据库操作，我们无需关心底层数据库是什么，也不用关心 SQL 语言，只需与数据对象交互即可。\n2 使用 SQLAlchemy 可以支持多种数据库，如：SQLite, Postgresql, MySQL, Oracle, MS-SQL, Firebird, Sybas等等。\n2.1 安装 在使用 SQLAlchemy 之前，我们首先要进行安装，使用 pip install sqlalchemy 即可。安装好后看一下版本，如下所示：\n\u0026gt;\u0026gt;\u0026gt; import sqlalchemy \u0026gt;\u0026gt;\u0026gt; sqlalchemy.__version__ \u0026#39;1.3.11\u0026#39; 2.2 创建连接 SQLAlchemy 通过 Engine 来驱动，从图中可以看出 Engine 内维护了一个连接池（Pool）和方言（Dialect），Pool 就是用来存放连接的，Dialect 是用来判断要连接的是哪种数据库，我们创建连接要先创建 Engine，然后再通过 Engine 来创建连接。\n2.2.1 SQLite 我们先来看一下如何创建 Engine，几种创建方式如下所示：\n相对路径方式 engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;) 绝对路径方式 # Unix/Mac engine = create_engine(\u0026#39;sqlite:////absolute/path/to/foo.db\u0026#39;) # Windows engine = create_engine(\u0026#39;sqlite:///C:\\\\path\\\\to\\\\foo.db\u0026#39;) # Windows 另一种写法 engine = create_engine(r\u0026#39;sqlite:///C:\\path\\to\\foo.db\u0026#39;) 创建内存数据库 SQLite 可以创建内存数据库，其他数据库不可以。\nengine = create_engine(\u0026#39;sqlite://\u0026#39;) 以相对路径方式为例，看一下实现示例：\nfrom sqlalchemy import create_engine # 创建 Engine engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 创建连接 conn = engine.connect() echo=True 会将执行语句打印出来，默认为 False；数据库（foo.db）不存在会自动创建。 2.2.2 其他数据库 MySQL数据库 在使用之前要进行第三方库的安装，使用 pip install mysqlclient 和 pip install pymysql 即可。\n创建 Engine 方式如下所示：\n# default engine = create_engine(\u0026#39;mysql://scott:tiger@localhost/foo\u0026#39;) # mysqlclient engine = create_engine(\u0026#39;mysql+mysqldb://scott:tiger@localhost/foo\u0026#39;) # PyMySQL engine = create_engine(\u0026#39;mysql+pymysql://scott:tiger@localhost/foo\u0026#39;) 使用示例如下所示：\nfrom sqlalchemy import create_engine engine = create_engine(\u0026#39;mysql://root:root@localhost:3306/mysql\u0026#39;, echo=True, pool_size=10, pool_recycle=3600) conn = engine.connect() 参数说明如下所示：\necho：值为 True 将执行语句打印出来，默认为 False。\rpool_size：连接池的大小，默认为 5，0 表示连接数无限制。\rpool_recycle：设置了 pool_recycle 后，SQLAlchemy 会在指定时间内回收连接，单位为秒。 Oracle数据库\n创建 Engine 方式如下所示： engine = create_engine(\u0026#39;oracle://scott:tiger@127.0.0.1:1521/sidname\u0026#39;) engine = create_engine(\u0026#39;oracle+cx_oracle://scott:tiger@tnsname\u0026#39;) PostgreSQL数据库\n创建 Engine 方式如下所示： # default engine = create_engine(\u0026#39;postgresql://scott:tiger@localhost/mydatabase\u0026#39;) # psycopg2 engine = create_engine(\u0026#39;postgresql+psycopg2://scott:tiger@localhost/mydatabase\u0026#39;) # pg8000 engine = create_engine(\u0026#39;postgresql+pg8000://scott:tiger@localhost/mydatabase\u0026#39;) MS SQL Server数据库\n创建 Engine 方式如下所示： # pyodbc engine = create_engine(\u0026#39;mssql+pyodbc://scott:tiger@mydsn\u0026#39;) # pymssql engine = create_engine(\u0026#39;mssql+pymssql://scott:tiger@hostname:port/dbname\u0026#39;) 2.3 创建表 表的创建通过映射类的方式实现，首先创建映射基类，后面的类需要继承它，如下所示：\nfrom sqlalchemy.ext.declarative import declarative_base Base = declarative_base() 创建具体映射类，如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class SysUser(Base): # 指定映射表名 __tablename__ = \u0026#39;sys_user\u0026#39; # id 设置为主键 id = Column(Integer, primary_key=True) # 指定 name 映射到 name 字段 name = Column(String(30)) password = Column(String(32)) # 创建表 Base.metadata.create_all(engine) 2.4 建立会话 具体的操作需要使用 session，创建方式如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() 2.5 基本操作 2.5.1 新增 我们先新增一条数据，如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class SysUser(Base): # 指定映射表名 __tablename__ = \u0026#39;sys_user\u0026#39; # id 设置为主键 id = Column(Integer, primary_key=True) # 指定 name 映射到 name 字段 name = Column(String(30)) password = Column(String(32)) Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() # 新增 su = SysUser(id=1, name=\u0026#39;Jhon\u0026#39;, password=\u0026#39;123456\u0026#39;) # 保存 session.add(su) # 提交 session.commit() # 关闭 session.close() 2.5.2 查询数据的方法 查询操作如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class SysUser(Base): # 指定映射表名 __tablename__ = \u0026#39;sys_user\u0026#39; # id 设置为主键 id = Column(Integer, primary_key=True) # 指定 name 映射到 name 字段 name = Column(String(30)) password = Column(String(32)) Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() # 查询一条数据，filter 相当于 where 条件 u = session.query(SysUser).filter(SysUser.id==1).one() # 查询所有数据 # session.query(SysUser).filter(SysUser.id==1).all() print(\u0026#39;name--\u0026gt;\u0026#39;, u.name) 2.5.3 修改数据的方法 我们将 id=1 这条数据的 name 修改一下，如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class SysUser(Base): # 指定映射表名 __tablename__ = \u0026#39;sys_user\u0026#39; # id 设置为主键 id = Column(Integer, primary_key=True) # 指定 name 映射到 name 字段 name = Column(String(30)) password = Column(String(32)) Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() u = session.query(SysUser).filter(SysUser.id==1).one() print(\u0026#39;修改前名字--\u0026gt;\u0026#39;, u.name) u.name = \u0026#39;James\u0026#39; session.commit() print(\u0026#39;修改后名字--\u0026gt;\u0026#39;, u.name) 2.5.4 删除数据的方法 我们将 id=1 这条数据删除，如下所示：\nfrom sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, Integer, String from sqlalchemy.orm import sessionmaker engine = create_engine(\u0026#39;sqlite:///foo.db\u0026#39;, echo=True) # 映射基类 Base = declarative_base() # 具体映射类 class SysUser(Base): # 指定映射表名 __tablename__ = \u0026#39;sys_user\u0026#39; # id 设置为主键 id = Column(Integer, primary_key=True) # 指定 name 映射到 name 字段 name = Column(String(30)) password = Column(String(32)) Session = sessionmaker(bind=engine) # 创建 Session 类实例 session = Session() u = session.query(SysUser).filter(SysUser.id==1).one() session.delete(u) session.commit() 总结 本文介绍了 SQLAlchemy 的基本概念和使用，对 Python 工程师使用 SQLAlchemy 提供了支撑。\n文章来自 纯洁的微笑\r博客\n","date":"2020-12-29T10:47:35+08:00","permalink":"//localhost:1313/post/tech/python/flask-with-mssql/","section":"post","tags":["python","flask","mssql"],"title":"在Flask中使用SQLAlchemy操作数据的方法"},{"categories":["tech"],"contents":"本文主要记录了使用streamlit在webapp中显示PDF文件的方法。\nStreamlit是一个如此出色的框架，可让您构建多个出色的数据科学应用程序。在本教程中，我们将了解如何将PDF文件嵌入我们的流式应用程序。 为了做到这一点，我们只需要步：\nst.markdown（）：这将使我们能够在应用程序中使用相同格式的HTML嵌入文件。 base64编码：为了能够通过我们发送pdf文件，我们需要在打开文件后使用base64编码对其进行编码。没有这个，您将无法看到显示的pdf –您只会收到404错误或其他错误。 import streamlit as st import base64 # 显示PDF文件的函数 def st_display_pdf(pdf_file): with open(pdf_file, \u0026#34;rb\u0026#34;) as f: base64_pdf = base64.b64encode(f.read()).decode(\u0026#39;utf-8\u0026#39;) pdf_display = f\u0026#39;\u0026lt;embed src=\u0026#34;data:application/pdf;base64,{base64_pdf}\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;1000\u0026#34; type=\u0026#34;application/pdf\u0026#34;\u0026gt;\u0026#39; st.markdown(pdf_display, unsafe_allow_html=True) def main(): st.title(\u0026#34;在Streamlit中嵌入PDF文件\u0026#34;) st.subheader(\u0026#34;Learn Streamlit\u0026#34;) st_display_pdf(\u0026#34;PDFembed.pdf\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() ","date":"2020-12-23T20:16:15+08:00","permalink":"//localhost:1313/post/tech/python/embedpdf/","section":"post","tags":["PDF","python","streamlit"],"title":"使用Streamlit在Web中嵌入显示PDF文件"},{"categories":["tech"],"contents":"即将面临职业测试，但是备考资料实在太多，光知识点就447页，真不愧是绝世武功的目录啊。不过，广西干部网络学院给大家提供了一个很好的模拟训练的平台，而且正式测试的题目也会从中间抽取。由于模拟平台的设计有点不友好，比如要练习单选题，你要做完全部的960道题，才能提交批改🙀。这个时间长度是个让人疯狂的状态。看了一下网页源码，居然直接嵌入了正确答案和解析。为了更加灵活的学习，干脆写了一个爬虫程序，将题库爬取下来，方便复习🌝\n使用了BeautifulSoup4。\nBeautiful Soup is a Python package for parsing HTML and XML documents. It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping.\n1.准备素材 登录网站，然后进入训练模块，查看网页源代码，并保存\u0026rsquo;.html\u0026lsquo;到本地项目目录下。大概结构如下：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;base href=\u0026#34;http://202.103.252.140:80/portal/\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge,chrome=1\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;ExamStack\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body data-genuitec-lp-enabled=\u0026#34;false\u0026#34; data-genuitec-file-id=\u0026#34;wc2-12\u0026#34; data-genuitec-path=\u0026#34;/ExamStackPortal/WebRoot/WEB-INF/views/practice-improve-qh.jsp\u0026#34;\u0026gt; \u0026lt;header data-genuitec-lp-enabled=\u0026#34;false\u0026#34; data-genuitec-file-id=\u0026#34;wc2-12\u0026#34; data-genuitec-path=\u0026#34;/ExamStackPortal/WebRoot/WEB-INF/views/practice-improve-qh.jsp\u0026#34;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34; style=\u0026#34;margin-bottom: 100px;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-xs-9\u0026#34; style=\u0026#34;padding-right: 0px;min-height:800px;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;def-bk\u0026#34; id=\u0026#34;bk-exampaper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;expand-bk-content\u0026#34; id=\u0026#34;bk-conent-exampaper\u0026#34;\u0026gt; \u0026lt;ul id=\u0026#34;exampaper-body\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;question qt-multiplechoice\u0026#34;\u0026gt; \u0026lt;form class=\u0026#34;question-body\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;question-body-text\u0026#34;\u0026gt;根据《行政处罚法》的规定，当事人对行政机关所给予的行政处罚享有哪些权利？（ ）\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;question-opt-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;A\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;A: 陈述权\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;B\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;B: 申辩权\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;C\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;C: 申请行政复议\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;D\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;D: 提起行政诉讼\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div class=\u0026#34;answer-desc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-summary\u0026#34;\u0026gt; \u0026lt;span\u0026gt;正确答案：\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;answer_value\u0026#34;\u0026gt;ABCD\u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-info\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-paw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 来源\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-warning\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-flag\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 解析\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;《行政处罚法》第六条 公民、法人或者其他组织对行政机关所给予的行政处罚，享有陈述权、申辩权；对行政处罚不服的，有权依法申请行政复议或者提起行政诉讼。 公民、法人或者其他组织因行政机关违法给予行政处罚受到损害的，有权依法提出赔偿要求。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-success\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-bookmark\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 考点\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;行政执法练习库 \u0026amp;gt; 多项选择题 \u0026amp;gt; 知识关键点：\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question qt-multiplechoice\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;question-title\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;question-title-icon\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;span class=\u0026#34;question-no\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;question-type\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt;multiplechoice\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;knowledge-point-id\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt;17\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;question-type-id\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt;2\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;[多选题]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;question-point-content\u0026#34;\u0026gt;\u0026lt;span\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;question-point\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;分)\u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;question-id\u0026#34; style=\u0026#34;display:none;\u0026#34;\u0026gt;17944\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;form class=\u0026#34;question-body\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;question-body-text\u0026#34;\u0026gt;张某是甲县农贸市场的个体工商户，县卫生行政主管部门多次通知张某办理健康证和卫生许可证，但张某一直未办理。县卫生行政主管部门遂依法对其作出行政处罚。根据《行政处罚法》的规定，张某对县卫生行政主管部门的处罚决定享有的权利包括哪些？（ ）\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;question-opt-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;A\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;A: 陈述权\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;B\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;B: 申辩权\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;C\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;C: 张某不服执法机关的处罚决定，可依法申请行政复议\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;question-list-item\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;D\u0026#34; name=\u0026#34;question-radio1\u0026#34; class=\u0026#34;question-input\u0026#34; /\u0026gt;\u0026lt;span class=\u0026#34;question-li-text\u0026#34;\u0026gt;D: 张某不服执法机关的处罚，可以拒绝执行行政处罚决定\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div class=\u0026#34;answer-desc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-summary\u0026#34;\u0026gt; \u0026lt;span\u0026gt;正确答案：\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;answer_value\u0026#34;\u0026gt;ABC\u0026lt;/span\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-info\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-paw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 来源\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-warning\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-flag\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 解析\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;《行政处罚法》第六条 公民、法人或者其他组织对行政机关所给予的行政处罚，享有陈述权、申辩权；对行政处罚不服的，有权依法申请行政复议或者提起行政诉讼。 公民、法人或者其他组织因行政机关违法给予行政处罚受到损害的，有权依法提出赔偿要求。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-detail\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;label label-success\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-bookmark\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span\u0026gt; 考点\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;answer-desc-content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;行政执法练习库 \u0026amp;gt; 多项选择题 \u0026amp;gt; 知识关键点：\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;!-- 其他略去 --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2.编写爬虫代码 以下为多选题的代码，其他单选和判断题的方法差不多。\nfrom bs4 import BeautifulSoup import requests # 方法1.直接在线爬取 htmlfile = requests.get(\u0026#39;http://202.103.252.140/portal/student/practice-improve/6/17/2\u0026#39;).content # 方法2.从保存的本地文件爬取 # htmlfile = open(\u0026#39;多选题.html\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) soup = BeautifulSoup(htmlfile, \u0026#39;lxml\u0026#39;, from_encoding=\u0026#39;utf-8\u0026#39;) tags = soup.find_all(\u0026#39;li\u0026#39;, class_=\u0026#34;qt-multiplechoice\u0026#34;) for tag in tags: print(tag.select(\u0026#39;.question-body-text\u0026#39;)[0].get_text()) tagsa = tag.select(\u0026#34;.question-li-text\u0026#34;) for tagc in tagsa: print(tagc.get_text()) 至此，大功告成。总题目数2000，复习去了。\n3. youtube上的参考教学资料 知乎上Dwzb的\rBeautifulSoup全面总结\r作为笔记收藏一下。 比较详细的视频介绍：\rPython Web Scraping\r，源码介绍\rwww.jimshapedcoding.com\r.\nfrom bs4 import BeautifulSoup import requests import time print(\u0026#39;Put some skill that you are not familiar with\u0026#39;) unfamiliar_skill = input(\u0026#39;\u0026gt;\u0026#39;) print(f\u0026#39;Filtering out {unfamiliar_skill}\u0026#39;) def find_jobs(): html_text = requests.get(\u0026#39;https://www.timesjobs.com/candidate/job-search.html?searchType=personalizedSearch\u0026amp;from=submit\u0026amp;txtKeywords=python\u0026amp;txtLocation=\u0026#39;).text soup = BeautifulSoup(html_text, \u0026#39;lxml\u0026#39;) jobs = soup.find_all(\u0026#39;li\u0026#39;, class_ = \u0026#39;clearfix job-bx wht-shd-bx\u0026#39;) for index, job in enumerate(jobs): published_date = job.find(\u0026#39;span\u0026#39;, class_=\u0026#39;sim-posted\u0026#39;).span.text if \u0026#39;few\u0026#39; in published_date: company_name = job.find(\u0026#39;h3\u0026#39;, class_ = \u0026#39;joblist-comp-name\u0026#39;).text.replace(\u0026#39; \u0026#39;,\u0026#39;\u0026#39;) skills = job.find(\u0026#39;span\u0026#39;, class_ = \u0026#39;srp-skills\u0026#39;).text.replace(\u0026#39; \u0026#39;,\u0026#39;\u0026#39;) more_info = job.header.h2.a[\u0026#39;href\u0026#39;] if unfamiliar_skill not in skills: with open(f\u0026#39;posts/{index}.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(f\u0026#34;Company Name: {company_name.strip()} \\n\u0026#34;) f.write(f\u0026#34;Required Skills: {skills.strip()} \\n\u0026#34;) f.write(f\u0026#39;More Info: {more_info}\u0026#39;) print(f\u0026#39;File saved: {index}\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: while True: find_jobs() #IMPORTANT: KEEP THIS AMOUNT HIGHER AS POSSIBLE TO AVOID SCRAPING CONTINOUSLY A WEBSITE. #YOU DO NOT WANT TO BE CONSIDERED AS A BOT WHO TRIES TO ATTACK A WEBSITE BY REQUESTING FROM IT TOO MUCH time_wait = 10 print(f\u0026#39;Waiting {time_wait} minutes...\u0026#39;) time.sleep(time_wait * 60) ","date":"2020-11-30T19:24:55+08:00","permalink":"//localhost:1313/post/tech/python/crabgxela/","section":"post","tags":["scrap","python"],"title":"Python爬取广西干部网络学院的训练题库"},{"categories":["tech"],"contents":"streamlit是一个用于构建机器学习、数据可视化的python框架。对于需要快速部署机器学习应用，或在网上展示一些小应用，又不想学习flask或django等的，streamlit简直是黑暗曙光。只需要 一些基本的pthon的知识（如果这个都没有，那就不用往下看了），结合\rstreamlit\r的示例，开发一个webapp可以说是十分迅速。本文主要记录了app上线过程中的端口转发和后台运行问题，至于编写streamlit应用的方法，请自行学习。\n在线图片识别\r1.服务器环境介绍 Debian 10 DNS域名解析到服务器IP的80端口 Python3.8 Nginx1.14.2 服务器（包括VPS控制台）的防火墙确保80端口开通 2. 安装streamlit pip install streamlit 安装之后在命令行输入测试（请先放行8501端口），注意：要在python环境中运行:\nstreamlit hello 如果能看到，下面的页面则说明运行正常。 此时，python搭建一个app环境，上传你的appname.py文件。\n在浏览器输入例如：http://35.167.158.251:8501测试看是否能正常运行： 注意：如果你的app引用了其他三方模块，请记得在服务器上安装它们。\nstreamlit run appname.py 3. Nginx的简单配置 修改 /etc/nginx/sites-available/default文件\nserver {\rlisten 80 default_server;\rlisten [::]:80 default_server;\rroot /var/www/html;\rindex index.html index.htm index.nginx-debian.html;\rserver_name _;\rlocation / {\r# First attempt to serve request as file, then\r# as directory, then fall back to displaying a 404.\r#try_files $uri $uri/ =404;\r# new add\r#proxy_set_header Host $http_host;\r#proxy_set_header X-Real-IP $remote_addr;\r#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r#proxy_set_header X-Scheme $scheme;\rproxy_pass http://127.0.0.1:8501;\r}\rlocation ^~ /static {\rproxy_pass http://127.0.0.1:8501/static/;\r}\rlocation ^~ /healthz {\rproxy_pass http://127.0.0.1:8501/healthz;\r}\rlocation ^~ /vendor {\rproxy_pass http://127.0.0.1:8501/vendor;\r}\rlocation /stream { # most important config\rproxy_pass http://127.0.0.1:8501/stream;\rproxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\rproxy_set_header Host $host;\rproxy_set_header Upgrade $http_upgrade;\rproxy_set_header Connection \u0026#34;upgrade\u0026#34;;\rproxy_read_timeout 86400;\r}\r} 4. 修改streamlit的配置文件 使用命令streamlit config show \u0026gt; ~/.streamlit/config.toml建立配置文件。 然后修改其中的：\nserverAddress = \u0026#34;your domain name\u0026#34; # 你的域名\renableCORS = false 5. 配置后台运行 先启动Nginx，systemctl start nginx。\n# 安装tmux\rapt install tmux\r# 新建会话\rtmux new -s StreamSession\r# 在窗口中输入命令\rstreamlit run appname.py\r或者\r/root/my_app/my_app_venv/bin/python3.8 /root/my_app/my_app_venv/bin/streamlit run /root/my_app/my_app_venv/appname.py 然后，Ctrl+B and then D (Don’t press Ctrl when pressing D)可以关闭窗口了。\n# 分离会话\rtmux attach -t StreamSession\r# 查看会话\rps aux | grep streamlit\r# 通过pid中断会话\rkill -9 20947 6. streamlit优缺点 streamlit的优点很明显：\n开发速度快，修改方便。非常适合个人开发者。 不必需要web方面知识也可以开发出可用的web app，这也是最吸引人的地方。 streamlit也有一些缺点：\n前端界面固定，开发者不能随意调整控件位置。 社区现在还不够完善，也有一些bug暂时没有解决。\n总的来说，streamlit绝对是一款值得学习的框架；也许你的领域并不是机器学习、数据分析领域，但是从另一个方面想，streamlit提供了丰富的控件以及简单的开发流程，完全可以使用。 ","date":"2020-11-27T10:10:13+08:00","permalink":"//localhost:1313/post/tech/python/streamlitocr/streamlitocr/","section":"post","tags":["python","streamlit","ocr"],"title":"Streamlit配合Nginx搭建在线OCR识别网站"},{"categories":["life"],"contents":"生活中，总有一些严峻考验，是崩溃还是胜利，就看你是否有做好准备。比如说，妻子不在家，而女儿急着要去练舞蹈。这时，作为一名女生的家长，编头发是一个重大考验。 如果此时掌握了一点方法的话，可以从容化危为安，赢得女儿的赞赏。 当然，一般情况下，没办法像上面这些家长一样现代高效解决。我需要的是简单实用方法：\n简便快捷又不失可爱的方法 莲蓬头\n双莲蓬头\n跟前面差不多的花卷\n稍微有点技术含量，适合正式一点场合 成熟一点后的发型\n公主型\n职业型，以后再用\n上舞蹈课前必备的盘发攻略 先用皮筋把头发扎成马尾，马尾是否扎在头型看上去最小最漂亮的地方，是芭蕾盘头成功与否的关键。马尾、下巴、耳朵最高处三点应形成一条直线。 将马尾顺着一个方向扭转至发尾。 顺着马尾扭转的方向将头发盘起来，不要盘得太紧，盘成扁平的圆形。 把发网套上，注意要先握紧，不要让头发松了 把盘好的头发压扁，要使头发尽量贴着头皮，用 U 型夹子把其固定。发卡要绕着发网别，要夹紧发网和头发。 ","date":"2020-11-24T11:40:42+08:00","permalink":"//localhost:1313/post/life/braidmethod/","section":"post","tags":["braid","生存"],"title":"有女生的家长必备技能之扎辫子"},{"categories":["life"],"contents":"$$ F=G\\frac{Mm}{r^2} $$\n一、基本概念和符号： 1、整除：如果一个整数a，除以一个自然数b，得到一个整数商c，而且没有余数，那么叫做a能被b整除或b能整除a，记作b|a。\n2、常用符号：整除符号“|”，不能整除符号“”;因为符号“∵”，所以的符号“∴”;\n二、整除判断方法： 能被2、5整除：末位上的数字能被2、5整除。\n能被4、25整除：末两位的数字所组成的数能被4、25整除。\n能被8、125整除：末三位的数字所组成的数能被8、125整除。\n也就是说，一个整数能否被 $2^x$ 或者 $5^x$ 整除，就看这个整数的后$x$位能否被2或5整除。\n能被3、9整除：各个数位上数字的和能被3、9整除。\n能被7整除：\n①末三位上数字所组成的数与末三位以前的数字所组成数之差能被7整除。\n②逐次去掉最后一位数字并减去末位数字的2倍后能被7整除。\n能被11整除：\n①末三位上数字所组成的数与末三位以前的数字所组成的数之差能被11整除。\n②奇数位上的数字和与偶数位数的数字和的差能被11整除。\n③逐次去掉最后一位数字并减去末位数字后能被11整除。\n能被13整除：\n①末三位上数字所组成的数与末三位以前的数字所组成的数之差能被13整除。\n②逐次去掉最后一位数字并减去末位数字的9倍后能被13整除。\n三、整除的性质： 如果a、b能被c整除，那么 (a+b) 与 (a-b) 也能被c整除。 如果a能被b整除，c是整数，那么a乘以c也能被b整除。 如果a能被b整除，b又能被c整除，那么a也能被c整除。 如果a能被b、c整除，那么a也能被b和c的最小公倍数整除。 四、数的整除性练习题 A.数的整除性规律练习 【能被2或5整除的数的特征】一个数的末位能被2或5整除，这个数就能被2或5整除 【能被3或9整除的数的特征】一个数，当且仅当它的各个数位上的数字之和能被3和9整除时，这个数便能被3或9整除。 例如，1248621各位上的数字之和是1+2+4+8+6+2+1=24\n3|24，则$3|1248621$。 又如，372681各位上的数字之和是3+7+2+6+8+1=27\n9|27，则$9|372681$。 【能被4或25整除的数的特征】一个数，当且仅当它的末两位数能被4或25整除时，这个数便能被4或25整除。 整数173824的末两位数为24，4|24，则4|173824。 整数43586775的末两位数为75，25|75，则25|43586775。 【能被8或125整除的数的特征】一个数，当且仅当它的末三位数字为0，或者末三位数能被8或125整除时，这个数便能被8或125整除。 整数32178000的末三位数字为0，则这个数能被8整除，也能够被125整除。 3569824的末三位数为824，8|824，则8|3569824。 214813750的末三位数为750，125|750，则125|214813750。 【能被7、11、13整除的数的特征】一个数，当且仅当它的末三位数字所表示的数，与末三位以前的数字所表示的数的差(大减小的差)能被7、11、13整除时，这个数就能被7、11、13整除。 例如，75523的末三位数为523，末三位以前的数字所表示的数是75，523-75=448，448÷7=64，即7|448，则7|75523。 又如，1095874的末三位数为874，末三位以前的数字所表示的数是1095，1095-874=221，221÷13=17，即13|221，则13|1095874。 再如，868967的末三位数为967，末三位以前的数字所表示的数是868，967-868=99，99÷11=9，即11|99，则11|868967。 此外，能被11整除的数的特征，还可以这样叙述：一个数，当且仅当它的奇数位上数字之和，与偶数位上数字之和的差(大减小)能被11整除时，则这个数便能被11整除。\n例如，4239235的奇数位上的数字之和为4+3+2+5=14，偶数位上数字之和为2+9+3=14，二者之差为14-14=0，0÷11=0，即11|0，则11|4239235。 B.数的整除运用方法 位差法——把一个数由右边向左边数，将奇位上的数字与偶位上的数字分别加起来，再求它们的差，如果这个差是11的倍数(包括0)，那么，原来这个数就一定能被11整除。\n例如:\n判断491678能不能被11整除。\n—→奇位数字的和9+6+8=23\n—→偶位数位的和4+1+7=1223-12=11\n因此，491678能被11整除。\n这种方法叫\u0026quot;奇偶位差法\u0026quot;。\n割减法——从一个数里减去11的10倍、20倍、30倍……到余下一个100以内的数为止。如果这个余数能被11整除，那么，原来这个数就一定能被11整除。\n例如：\n判断583能不能被11整除。\n用583减去11的50倍(583-11×50=33)余数是33，33能被11整除，所以583也一定能被11整除。\n1与0的特性：\n1是任何整数的约数，即对于任何整数a，总有1|a.\n0是任何非零整数的倍数，a≠0，a为整数，则a|0. 若一个整数能被2和3整除，则这个数能被6整除。 原文网址：https://www.51test.net/show/9197799.html\n","date":"2020-11-24T09:14:23+08:00","permalink":"//localhost:1313/post/life/math/","section":"post","tags":["math","整除","小学","奥数"],"title":"辅导小学奥数时必须掌握的整除知识"},{"categories":["tech"],"contents":"python本身无疑是一款非常流行和强大的语言，对于小白来说比较容易上手学习。我也利用网络学习了一些基本的知识，特别是结合阿里云、百度、腾讯或者Azure等云服务商提供的API接口，也切实感受到了 这个语言对解决实际问题的帮助。不过，这些project都是在命令行环境运行的多，为了解决软件的发布问题，只好又了解GUI方面知识。比较几款之后，发现\rpysimplegui\r非常适合上手。\n1.主程序代码如下 import baiduOCR as ocr import PySimpleGUI as sg layout = [[sg.Text(\u0026#39;请选择要识别的图片\u0026#39;), sg.Text(size=(15, 1), key=\u0026#39;-OUTPUT-\u0026#39;)], [sg.Input(size=(100, 1), key=\u0026#39;-IN-\u0026#39;, readonly=True), sg.FileBrowse(\u0026#39;选择文件\u0026#39;, file_types=((\u0026#34;jpg\u0026#34;, \u0026#34;*.jpg\u0026#34;), \\ (\u0026#34;gif files\u0026#34;, \u0026#34;*.gif\u0026#34;), (\u0026#34;png\u0026#34;, \u0026#34;*.png\u0026#34;), (\u0026#34;bmp\u0026#34;, \u0026#34;*.bmp\u0026#34;)), key=\u0026#39;-FILE-\u0026#39;, size=(10, 1))], [sg.Button(\u0026#39;Ok\u0026#39;, size=(10, 1), tooltip=\u0026#39;点击开始大数据识别图片中的文字\u0026#39;), sg.Button(\u0026#39;Exit\u0026#39;, size=(10, 1), pad=(0, 10))], [sg.Output(size=(120, 30), key=\u0026#39;-OCROUT-\u0026#39;, font=(\u0026#39;新宋体, 10\u0026#39;))], [sg.FileSaveAs(\u0026#39;另存为：\u0026#39;, \\ size=(15, 1), pad=(0, 20),\\ file_types=((\u0026#34;Text Files\u0026#34;, \u0026#34;*.txt\u0026#34;),),\\ default_extension=\u0026#39;.txt\u0026#39;)]] window = sg.Window(\u0026#39;OCR Tool by \u0026#39;, layout) while True: event, values = window.read() filename = values[\u0026#39;-FILE-\u0026#39;] if event in (None, \u0026#39;Exit\u0026#39;): break if event == \u0026#39;Ok\u0026#39;: values[\u0026#39;-OCROUT-\u0026#39;] = ocr.ocrlocal(filename) sg.popup_ok(\u0026#34;完成识别\u0026#34;) window.close() 2.baiduOCR模块代码如下 # encoding:utf-8 import requests import base64 APP_ID = \u0026#39;\u0026lt;- your APPID -\u0026gt;\u0026#39; API_KEY = \u0026#39;\u0026lt;- your API_KEY -\u0026gt;\u0026#39; SECRET_KEY = \u0026#39;\u0026lt;- your SECRET_KEY-\u0026gt;\u0026#39; # request_url = \u0026#34;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic\u0026#34; #文字识别（高精度版）500次/天 request_url = \u0026#34;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic\u0026#34; #文字识别（标准版）50000次/天 host = \u0026#39;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials\u0026amp;client_id=\u0026#39; \\ + API_KEY + \u0026#39;\u0026amp;client_secret=\u0026#39; + SECRET_KEY def ocrlocal(src): # 二进制方式打开图片文件 f = open(src, \u0026#39;rb\u0026#39;) img = base64.b64encode(f.read()) global request_url, host response = requests.get(host) params = {\u0026#34;image\u0026#34;:img} access_token = response.json()[\u0026#39;access_token\u0026#39;] request_url = request_url + \u0026#34;?access_token=\u0026#34; + access_token headers = {\u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;} response = requests.post(request_url, data=params, headers=headers) result = response.json()[\u0026#39;words_result\u0026#39;] for i in result: print(i[\u0026#34;words\u0026#34;]) 3.程序完工留念 通过pyinstaller编译打包\npyinstaller -F -w sgTest.py 比较麻烦的是，最后保存识别结果的功能还未摸索出来😌\n11.23更新 完善保存文件的方法：\n# pathlib的方法保存识别结果为txt文件 def save_file_as(): filename = sg.popup_get_file(\u0026#39;Save As\u0026#39;, modal=True, keep_on_top=True, save_as=True, no_window=True, file_types=((\u0026#34;Text Files\u0026#34;, \u0026#34;*.txt\u0026#34;),), default_extension=\u0026#39;.txt\u0026#39;) if filename: file = pathlib.Path(filename) file.write_text(values.get(\u0026#39;-BODY-\u0026#39;)) window[\u0026#39;_INFO_\u0026#39;].update(value=file.absolute()) sg.popup_ok(\u0026#39;Save Done\u0026#39;) return file ...... if (event == \u0026#39;Save\u0026#39;) and (values.get(\u0026#39;-BODY-\u0026#39;) != \u0026#34;\\n\u0026#34; ): save_file_as() if (event == \u0026#39;_INFO_\u0026#39;): os.system(window[\u0026#39;_INFO_\u0026#39;].get()) ","date":"2020-11-19T18:50:46+08:00","permalink":"//localhost:1313/post/tech/python/pysimpleguidemo/","section":"post","tags":["Python","OCR","Baidu","API","PySimpleGUI"],"title":"PySimpleGUI制作百度云图片文字识别软件"},{"categories":["VPS"],"contents":"搬瓦工双十一🧧优惠码\nBWH20201111（优惠 11%）\n最便宜的一款也要年付 $49.99 USD，基本就是50美金 SPECIAL 20G KVM PROMO V3 - LOS ANGELES - CN2 SSD: 20 GB RAID-10 RAM: 1024 MB CPU: 1x Intel Xeon Transfer: 1000 GB/mo Link speed: 1 Gigabit Location: Los Angeles Direct route via CN2 and China Unicom Free automatic backups Free snapshots VPS technology: KVM/KiwiVM OS: 32 or 64 bit Centos, Debian, Ubuntu Instant OS reload IPv4: 1 dedicated address IPv6 support: **No** Full root access Instant RDNS update from control panel Automatic migration between datacenters No contract, anytime cancellation Strictly self-managed, no support 99.9% uptime guarantee 不过目前似乎有更省心经济的方案，月付9.9元，晚高峰油管4K视频稳定在40000+ 🥰： 晚高峰稳定在40000\u0026#43;\n提供一个下载样式按钮： download\r","date":"2020-11-15T19:12:02+08:00","permalink":"//localhost:1313/post/tech/vps/2020-11/","section":"post","tags":["vps","youtube","4K","video"],"title":"晚高峰的4K油管视频效率"},{"categories":["tech"],"contents":"本文主要介绍如何使用Slimbox 2。 Slimbox 2是一个JavaScript库，它在窗口中而不是在单独的窗口（弹出窗口）中将图像和照片显示为模式窗口。\n官方网站\r此库需要单独使用jQuery\n1.下载并安装 从\r这里\r下载并解压缩。 解压缩后，将css和js目录放置在任何位置。\n2.加载CSS和JS 将以下内容写在html文件的 \u0026lt;head\u0026gt; 中，请根据您自己网站的环境更改路径。\n\u0026lt;link href=\u0026#34;css/slimbox2.css\u0026#34; type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;js/jquery.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;js/slimbox2.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; $(document).ready(function() { $(\u0026#39;a[rel*=lightbox]\u0026#39;).slimbox(); }); \u0026lt;/script\u0026gt; 3.使用方法 只需将 rel =“ lightbox” 属性添加到原始图片a元素链接中。\n\u0026lt;a href=\u0026#34;images/sample1.jpg\u0026#34; rel=\u0026#34;lightbox\u0026#34;\u0026gt;画像1\u0026lt;/a\u0026gt; 对于要分组并使其可导航的相关图像集，需要向属性rel的名称lightbox后添加一个组名，例如：\n\u0026lt;a href=\u0026#34;images/image-1.jpg\u0026#34; rel=\u0026#34;lightbox-cats\u0026#34;\u0026gt;image #1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;images/image-2.jpg\u0026#34; rel=\u0026#34;lightbox-cats\u0026#34;\u0026gt;image #2\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;images/image-3.jpg\u0026#34; rel=\u0026#34;lightbox-cats\u0026#34;\u0026gt;image #3\u0026lt;/a\u0026gt; 如果在同一页面上有多个将灯箱应用到的链接，则当鼠标悬停在上方时，将始终显示“ PREV”和“ NEXT”按钮。\n4.显示图片标题 如果要在左下角显示图像的标题，请将title属性添加到a元素。\n如果需要，您甚至可以在标题中使用HTML。您必须用HTML实体替换 \u0026lt; 和 \u0026gt; 字符，并使用单引号而不是双引号。\n\u0026lt;a href=\u0026#34;images/sample1.jpg\u0026#34; rel=\u0026#34;lightbox\u0026#34; title=\u0026#34;sample\u0026#34;\u0026gt;画像1\u0026lt;/a\u0026gt; 5.其他功能选项 选项以以下形式设置：\n$(document).ready(function() { $(\u0026#39;a[rel*=lightbox]\u0026#39;).slimbox({ resizeDuration : 200, imageFadeDuration : 200 }); }); 选项 初始值 说明 loop false 第一次或最后一次到达时是​​否存在循环 overlayOpacity 0.8 叠加透明度 overlayFadeDuration 400 叠加速度 resizeDuration 400 加载图像时调整大小的速度 resizeEasing swing 缓和 initialWidth 250 初始盒宽 initialHeight 250 初始盒子高度 imageFadeDuration 400 图像淡入速度 captionAnimationDuration 400 字幕的出现速度 counterText Image {x} sur {y} 左下角显示的图像的索引文本 closeKeys [27，88，67] “ CLOSE”键盘按键代码分配 previousKeys [37，80] “ PREV”键盘的键代码分配 nextKeys [39，78] “ NEXT”键盘的键代码分配 ","date":"2020-11-13T09:03:21+08:00","permalink":"//localhost:1313/post/tech/slim2/","section":"post","tags":["slimbox2","lightbox","image"],"title":"如何使用Slimbox2显示图片灯箱"},{"categories":["game"],"contents":"目前暗黑3的2.6.10更新檔已經上綫！暴雪台灣網放出消息，📣 22賽季預計會在 11月10日推出。可實際上今天還并未出現 😂 只能順手刷了兩遍宏偉秘境。 戰大佬\n不過值得一提的是通過1M的香港VPS（阿里雲國際免費試用一年）搭建加速服務器似乎效果不錯，晚高峰的網絡延時也不會太高，免去了官方加速器的高昂成本。\n基本在200ms以内\n22賽季\n本次升級新變化 一是加入暗影分身\n二是卡奈魔盒增加一個欄位 賽季旅程獎勵 如果你以前有勤奮地把惡魔通通殺光，也有在每次的賽季旅程中取得征服者稱號，你應該已經拿到了幾個額外的儲物箱欄頁。在每個賽季裡完成征服者層級的挑戰，還可以再獲得一個額外欄頁，最多可以獲得共五個：\n聖休亞瑞守護者：在五分鐘內完成苦難 XIII 難度的等級 70 涅法雷姆秘境。 嗜寶如命：將三顆傳奇寶石升至 55 等以上。 我就是來贏的：在這個賽季中完成兩個戰勛。 日子還是要過：在 15 秒內殺死苦痛 XIII 難度下等級 70 的瑪格妲。 錢不是問題：在苦痛 XIII 難度下殺死貪婪女王。涅法雷姆秘境以外的盜寶哥布林有時候會開啟通往藏寶秘窟的傳送門，讓玩家進入貪婪女王的領地。 深入秘境：獨自一人達到宏偉秘境等級 60。宏偉秘境之石可從各種難度的秘境守護者身上取得。 能力強化：透過卡奈魔方使用 50 級以上的寶石強化遠古傳奇物品。 方塊重鑄：使用卡奈魔方重鑄傳奇物品。 海德格的贈禮 最後要說的是，完成賽季旅程特定章節所能獲得的海德格的贈禮已經再次輪替。以下為海德格的贈禮套裝：各位賽季新玩家，海德格的贈禮取得方式如下：\n完成第二、三、四章的賽季旅程，你將會獲得三袋海德格的贈禮。這些贈禮內有角色職業套裝的幾個部位。所有玩家每個賽季僅能以此方式獲得一套完整套裝，專家與非專家級角色亦然，所以請務必謹慎選擇！\n你所獲得的套裝會根據玩家開啟海德格的贈禮時所使用的角色職業而定。如欲收集完整的職業套裝，你必須使用相同角色開啟所有三袋贈禮。第 22 賽季首開先例，海德格的贈禮將會提供前三個賽季的全新職業套裝：\n第22賽季海德格的贈禮套裝如下：\n野蠻人 - 九十蠻夷 聖教軍 - 英勇聖禦 惡魔獵人 - 恐懼之地機鎧 武僧 - 正義楷模 巫醫 - 蒙杜奴古戰裝 秘術師 - 堤豐罩衣 死靈法師 - 燃燒狂歡節舞會裝束 ","date":"2020-11-12T22:08:44+08:00","permalink":"//localhost:1313/post/game/2020-11/","section":"post","tags":["Diablo"],"title":"DiabloIII 2.6.10上线试玩"},{"categories":["tech"],"contents":" pvere.net\r请先准备域名并解析IP\n安装服务器和设置防火墙 $ sudo apt install nginx ufw $ sudo ufw allow 22 $ sudo ufw reload $ sudo ufw allow \u0026#39;Nginx Full\u0026#39; $ sudo ufw reload 查看防火墙状态\n$ sudo ufw status 配置 Nginx server $ sudo systemctl start nginx 默认网页根目录在 /var/www/. 创建新站点文件 /etc/nginx/sites-available 使用 example.com:\n$ sudo emacs /etc/nginx/sites-available/example.com 粘贴以下内容：\nserver { listen 80; # Configure the server for HTTP on port 80 server_name example.com; # Your domain name root /var/www; # The files for your server index index.html; # You will create this file shortly } 修改文件夹权限\n$ sudo chmod 0755 /your/path/to/www 新建 index.html 测试Nginx是否正常运行:\n$ sudo emacs /var/www/index.html $ sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/ $ sudo systemctl restart nginx 设置 SSL (HTTPS) $ sudo apt install python-certbot-nginx $ sudo certbot --nginx $ sudo systemctl restart nginx 设置自动更新证书 $ sudo crontab -e 设置为每天 09:00 运行，在最后一行添加如下：\n0 9 * * * certbot renew --post-hook \u0026#34;systemctl reload nginx\u0026#34; 更新的时间可以灵活设置。First column specifies the minutes and the second specifies the hour (24h clock).\nNote: 由于使用SSL, 开启 gzip 可能会影响安全. 此处跳过。\n其他功能配置 启用 HTTPS/2 $ sudo emacs /etc/nginx/sites-available/example.com 将\nlisten 443 ssl; # managed by Certbot 替换成\nlisten 443 ssl http2; # managed by Certbot 重启Nginx server。\n启用客户端缓存 $ sudo emacs /etc/nginx/sites-available/example.com 将下方代码插入第一个域名解析块末尾：\nserver{\r# ...\r# Stuff\r# ...\r# Media\rlocation ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {\rexpires 30d;\r}\r# CSS and Js\rlocation ~* \\.(css|js)$ {\rexpires 7d;\r} 设置 Hugo 站点 安装Hugo软件\n$ sudo apt install hugo 创建新站点\n$ hugo newsite sitename\n下载主题包\n$ git clone https://github.com/Track3/hermit.git themes/hermit\n修改站点根目录下的配置文件config.toml，以启用新主题\ntheme = 'hermit'\n建立新文章\n$ hugo new posts/some-post.md\n测试站点运行，在站点根目录下运行如下\n$ hugo server -D\n使用 -D 选项以显示草稿文章。\n编译生成站点文件 $ hugo 将会在站点根目录下新建一个public文件夹，里面包括网站的发布到外部服务器的所有内容。\n如果web服务器是远程服务器，可以使用rsync软件将网页内容同步过去：\n$ rsync -aAXv /path/to/sitename/public/ user@example.com:/var/www/ --delete 上面的命令需要确保user用户对远程服务器的www文件夹有写入权限，并且SSH端口处于开启状态。\n使用自定义的404页面需要在Nginx中设置 /etc/nginx/sites-available/yoursite.com:\nerror_page 404 /404.html; ","date":"2020-11-11T15:28:15+08:00","permalink":"//localhost:1313/post/tech/delplyhugowithnginx/","section":"post","tags":["Hugo","Nginx"],"title":"使用Nginx和Hugo建立静态网站"},{"categories":["tech"],"contents":"\r您的浏览器不支持 video 标签。\r天翼云对象存储 您的浏览器不支持 video 标签。\r{{\\\u0026lt; param date \u0026gt;}}\n","date":"2020-11-10T17:07:10+08:00","permalink":"//localhost:1313/post/tech/videojs/","section":"post","tags":["video","4K","video"],"title":"Magical Europe - 4K Timelapse 歐洲30國縮時攝影"},{"categories":["tech"],"contents":"SSH背景 笔者之前对于SSH(Secure Shell, 安全外壳协议)的了解仅仅知道一般用来进行访问远程主机、是用来替代telnet的不安全链接而发展的。常用的也只有ssh和scp，后来发现还有sftp，经过了解知道各个的作用。接下来讲叙述在学习和开发的过程中该如何使用他们。\nssh $ ssh # out: usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command] # eg： $ ssh -p 50000 root@192.168.10.10 # 这个应该是用的最多的命令了，由于SSH的默认端口为22， # 通常情况下对于没有独立ip的情况下，有时候会使用NAT技术会将22端口映射出来，这时候就需要加上-p指定端口 scp scp和cp命令相似，都是文件拷贝的命令，可以将本地文件拷贝到远程主机的目录下，也可以将远程主机文件拷贝到本地目录来。但是scp是安全的文件拷贝\n$ scp # out: usage: scp [-346BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program] source ... target # eg: $ scp -P 50000 /tmp/test.txt root@192.168.10.10:/tmp # 将本地/tmp/test.txt上传到192.168.10.10这个ip地址对应的主机的/tmp目录下 sftp 这个命令我用的极少，经了解其实sftp和ftp相似，由于ftp是不安全的的协议，在Linux操作系统中ftp的实现软件叫做vsftp，而sftp是基于SSH协议基础上，带有安全的文件传输。他的用法也极为简单\n$ sftp # out: usage: sftp [-46aCfpqrv] [-B buffer_size] [-b batchfile] [-c cipher] [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-R num_requests] [-S program] [-s subsystem | sftp_server] destination # eg: $ sftp -P 50000 root@192.168.10.10 # out: # sftp\u0026gt; ------------------------------------------------------------------------------------- sftp\u0026gt; help # out: Available commands: bye Quit sftp cd path Change remote directory to \u0026#39;path\u0026#39; chgrp grp path Change group of file \u0026#39;path\u0026#39; to \u0026#39;grp\u0026#39; chmod mode path Change permissions of file \u0026#39;path\u0026#39; to \u0026#39;mode\u0026#39; chown own path Change owner of file \u0026#39;path\u0026#39; to \u0026#39;own\u0026#39; df [-hi] [path] Display statistics for current directory or filesystem containing \u0026#39;path\u0026#39; exit Quit sftp get [-afPpRr] remote [local] Download file reget [-fPpRr] remote [local] Resume download file reput [-fPpRr] [local] remote Resume upload file help Display this help text lcd path Change local directory to \u0026#39;path\u0026#39; lls [ls-options [path]] Display local directory listing lmkdir path Create local directory ln [-s] oldpath newpath Link remote file (-s for symlink) lpwd Print local working directory ls [-1afhlnrSt] [path] Display remote directory listing lumask umask Set local umask to \u0026#39;umask\u0026#39; mkdir path Create remote directory progress Toggle display of progress meter put [-afPpRr] local [remote] Upload file pwd Display remote working directory quit Quit sftp rename oldpath newpath Rename remote file rm path Delete remote file rmdir path Remove remote directory symlink oldpath newpath Symlink remote file version Show SFTP version !command Execute \u0026#39;command\u0026#39; in local shell ! Escape to local shell ? Synonym for help 注意： ssh中的-p与 scp和sftp中的-P不一样，在实际操作的过程中可能出现错误。要多加注意。\nQ\u0026amp;A 其实关于SSH的只是还有很多比如免密连接，使用ssh-keygen生成公钥和私钥，在以后连接之后就不需要在输入密码等。\n文章转自 光明携带者的博客\r","date":"2020-11-10T10:32:02+08:00","permalink":"//localhost:1313/post/tech/scpssh/","section":"post","tags":["SSH","SCP","FTP"],"title":"SSH、SCP、SFTP使用"},{"categories":["tech"],"contents":"为了最大节约带宽和服务器资源，除了尝试在CDN中缓存CSS、js文件之外，我想到尽量设置网页不主动加载一些不必要的外部库。 例如，一些纯文字的页面就不需要jquery库的支持，而使用图片灯箱的页面则自动加载fancybox的资源库。 因此，对于一些需要展示图片的网页，我就动态启用外部脚本链接。\n实现的方法也很简单，目前来看已经能满足我的要求，至于效果待以后再评估：\n修改single.html 具体就是修改theme文件中的themes\\hello-friend\\layouts_default\\single.html，\n在倒数第二行插入如下代码：\n{{ if (findRE \u0026#34;div class=.?fancybox.?\u0026#34; .Content 1) }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} div class=.?fancybox.? 为我的shortcodes中的代码：\n\u0026lt;div class=\u0026#34;fancybox\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;a data-fancybox=\u0026#34;{{ $gallery }}\u0026#34; href=\u0026#34;{{ $path }}/{{ $file }}\u0026#34; data-caption=\u0026#34;{{ $caption }}\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;{{ $path }}/{{ $file }}\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; ","date":"2020-11-09T20:08:25+08:00","permalink":"//localhost:1313/post/tech/dynamicusejs/","section":"post","tags":["Hugo","JS","CSS"],"title":"在Hugo网页中动态引用JS与CSS文件"},{"categories":["other"],"contents":"1.以下内置单张图片显示 2.HTML5方式播放4K视频 如果不启用confing.toml则无法使用\n3.内置播放youtube视频功能 使用方法：{{\u0026lt; youtube IdejM6wCkxA \u0026gt;}}\n注意：需要外网连接才能正常播放\n4..fancybox播放视频 测试短片 Asteroid City - Official Trailer ： 您的浏览器不支持 video 标签。\r使用方法：{{\u0026lt; fancyvideo src=\u0026ldquo;path\u0026rdquo; \u0026gt;}}\n5.以下通过fancybox实现图片灯箱并滚动显示 esmeralda\ncolorful lights\nPope Edouard de Beaumont-1844\nVictor Hugo Hunchback\n","date":"2020-10-31T23:06:48+08:00","permalink":"//localhost:1313/post/tech/videotest/","section":"post","tags":["video","4K","lightbox"],"title":"LightBox and HTML5 Video"},{"categories":["tech"],"contents":"使用内嵌HTML语言，需要在config.toml中加入如下：\n[markup.goldmark.renderer]\runsafe=true 参考式 参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。 语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。\n我经常去的几个网站[Google][1],[Demi的随笔和技术空间][2],[Demi的随笔和技术空间][]。 [1]:http://www.google.com [2]:https://yuhongjun.github.io/ \u0026#34;Demi的随笔和技术空间\u0026#34; [Demi的随笔和技术空间]:https://yuhongjun.github.io/ 显示效果如下： 我经常去的几个网站\rGoogle\r,\rDemi的随笔和技术空间\r,\rDemi的随笔和技术空间\r。\n锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。\n注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。\n## 0. 跳转测试{#index}\r....................\r。。。。。。。\r...........\r跳转到[跳转测试](#index) 注脚 语法说明： 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。\n使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。\r[^1]:Markdown是一种纯文本标记语言\r[^2]:HyperText Markup Language 超文本标记语言\r[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文 效果如下： 使用 Markdown1可以效率的书写文档, 直接转换成 HTML2, 你可以使用 Leanote3 编辑器进行书写。\n粘贴 HTML 原始码 在代码区块里面， \u0026amp; 、 \u0026lt; 和 \u0026gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：\n\u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; © 2016 *** \u0026lt;/div\u0026gt; 显示结果如下：\n** 居中加粗 **\n\u0026lt;center\u0026gt;居中\u0026lt;/center\u0026gt; **\u0026lt;center\u0026gt; 居中加粗\u0026lt;/center\u0026gt;** 没有空格\n半角空格\n半角空格两个\n全角空格\n全角空格两个，以后就是用这个做为缩进\n没有空格 \u0026amp;ensp;半角空格 \u0026amp;ensp;\u0026amp;ensp;半角空格两个 \u0026amp;emsp;全角空格 \u0026amp;emsp;\u0026amp;emsp;全角空格两个，以后就是用这个做为缩进 `\u0026lt;font face=\u0026#34;华文行楷\u0026#34;\u0026gt;华文行楷\u0026lt;/font\u0026gt; ` \u0026lt;font face=\u0026#34;华文行楷\u0026#34;\u0026gt;华文行楷\u0026lt;/font\u0026gt;\r`\u0026lt;center\u0026gt;\u0026lt;font face=\u0026#34;华文行楷\u0026#34; size=100px color=\u0026#34;red\u0026#34;\u0026gt;华文行楷居中\u0026lt;/font\u0026gt;\u0026lt;/center\u0026gt; `\r\u0026lt;center\u0026gt;\u0026lt;font face=\u0026#34;华文行楷\u0026#34; size=100px color=\u0026#34;red\u0026#34;\u0026gt;华文行楷居中\u0026lt;/font\u0026gt;\u0026lt;/center\u0026gt; ```html\r\u0026lt;font Size=1\u0026gt;我是几号字来着1\u0026lt;/font\u0026gt; \u0026lt;font Size=2\u0026gt;我是几号字来着 --\u0026gt; 2号\u0026lt;/font\u0026gt; \u0026lt;font Size=3\u0026gt;我是几号字来着 --\u0026gt; 3号\u0026lt;/font\u0026gt; \u0026lt;font Size=4\u0026gt;我是几号字来着 --\u0026gt; 4号\u0026lt;/font\u0026gt; \u0026lt;font Size=5\u0026gt;我是几号字来着 --\u0026gt; 5号\u0026lt;/font\u0026gt; \u0026lt;font Size=6\u0026gt;我是几号字来着 --\u0026gt; 6号\u0026lt;/font\u0026gt; \u0026lt;font Size=7\u0026gt;我是几号字来着 --\u0026gt; 7号\u0026lt;/font\u0026gt; \u0026lt;center\u0026gt;\u0026lt;font Size=5\u0026gt;居中加入5号字\u0026lt;/font\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;center\u0026gt;\u0026lt;font size=5 face=\u0026#34;华文行楷\u0026#34;\u0026gt;华文行楷居中5号字\u0026lt;/font\u0026gt;\u0026lt;/center\u0026gt; 我是几号字来着1\n我是几号字来着 \u0026ndash;\u0026gt; 2号\n我是几号字来着 \u0026ndash;\u0026gt; 3号\n我是几号字来着 \u0026ndash;\u0026gt; 4号\n我是几号字来着 \u0026ndash;\u0026gt; 5号\n我是几号字来着 \u0026ndash;\u0026gt; 6号\n我是几号字来着 \u0026ndash;\u0026gt; 7号\nMarkdown是一种纯文本标记语言\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHyperText Markup Language 超文本标记语言\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n开源笔记平台，支持Markdown和笔记直接发为博文\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2020-10-31T16:20:56+08:00","permalink":"//localhost:1313/post/tech/markdownextend/","section":"post","tags":["markdown"],"title":"MarkDownTips"},{"categories":["tech"],"contents":"记录一下MD文档的常用方法\n# Markdown Cheat Sheet Thanks for visiting [The Markdown Guide](https://www.markdownguide.org)! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax). ## Basic Syntax These are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements. ### Heading # H1 ## H2 ### H3 ### Bold **bold text** ### Italic *italicized text* ### Blockquote \u0026gt; blockquote ### Ordered List 1. First item 2. Second item 3. Third item ### Unordered List - First item - Second item - Third item ### Code `code` ### Horizontal Rule --- ### Link [title](https://www.example.com) ### Image ![alt text](image.jpg) ## Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. ### Table | Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text | ### Fenced Code Block \\``` { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } \\``` ### Footnote Here\u0026#39;s a sentence with a footnote. [^1] [^1]: This is the footnote. ### Heading ID ### My Great Heading {#custom-id} ### Definition List term : definition ### Strikethrough ~~The world is flat.~~ ### Task List - [x] Write the press release - [ ] Update the website - [ ] Contact the media ","date":"2020-10-30T16:20:56+08:00","permalink":"//localhost:1313/post/tech/markdown-cheat-sheet/","section":"post","tags":["markdown"],"title":"Markdown Cheat Sheet"},{"categories":["tech"],"contents":" 全世界是一个巨大的舞台，所有红尘男女均只是演员罢了。上场下场各有其时。每个人一生都扮演着许多角色，从出生到死亡有七种阶段。\n———莎士比亚\n一款优雅的字体能为网页增色不少，正如纤纤细手上的一枚戒指。 通过网页引用链接，在css中定义，是调用字体的便捷途径。 一般是英文字体 ⇨ 苹果字体 ⇨ 中文字体，最后再加sans-serif。 如下：\nMulish\u0026rsquo;, -apple-system, \u0026lsquo;Noto Serif SC\u0026rsquo;, \u0026ldquo;PingFang SC\u0026rdquo;, \u0026ldquo;Microsoft Yahei UI\u0026rdquo;, \u0026ldquo;Microsoft Yahei\u0026rdquo;, sans-serif;\n1.网络直接引用 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=zh-cn\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@300\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p style=\u0026#34;font-family: Inter,-apple-system,BlinkMacSystemFont,Roboto,\u0026#39;Noto Serif SC\u0026#39;,Segoe UI,Helvetica,Arial,sans-serif; font-size:1rem\u0026#34;\u0026gt; 因为好奇心，想看看黑暗中有什么。 12344567890 ABCDEFGHIJKLMNOPQ \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2.本地化引用 1.在 google-webfonts-helper(\rhttps://google-webfonts-helper.herokuapp.com/fonts\r) 中选择想要的字体 search font\n2.左侧输入如Noto Serif SC，右侧勾chinese-simplified latin选400、900 select the font size\n3.进行下载并解压到网站资源目录中\ndownload the zip package\n4.新建一个css字体文件googlefonts.css，贴入下列内容\npaste the css script\n/* noto-serif-sc-regular - latin_chinese-simplified */ @font-face { font-family: \u0026#39;Noto Serif SC\u0026#39;; font-style: normal; font-weight: 400; src: url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.eot\u0026#39;); /* IE9 Compat Modes */ src: local(\u0026#39;Noto Serif SC\u0026#39;), local(\u0026#39;NotoSerifSC-Regular\u0026#39;), url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.eot?#iefix\u0026#39;) format(\u0026#39;embedded-opentype\u0026#39;), /* IE6-IE8 */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), /* Super Modern Browsers */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.woff\u0026#39;) format(\u0026#39;woff\u0026#39;), /* Modern Browsers */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;), /* Safari, Android, iOS */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-regular.svg#NotoSerifSC\u0026#39;) format(\u0026#39;svg\u0026#39;); /* Legacy iOS */ } /* noto-serif-sc-900 - latin_chinese-simplified */ @font-face { font-family: \u0026#39;Noto Serif SC\u0026#39;; font-style: normal; font-weight: 900; src: url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.eot\u0026#39;); /* IE9 Compat Modes */ src: local(\u0026#39;Noto Serif SC Black\u0026#39;), local(\u0026#39;NotoSerifSC-Black\u0026#39;), url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.eot?#iefix\u0026#39;) format(\u0026#39;embedded-opentype\u0026#39;), /* IE6-IE8 */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), /* Super Modern Browsers */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.woff\u0026#39;) format(\u0026#39;woff\u0026#39;), /* Modern Browsers */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;), /* Safari, Android, iOS */ url(\u0026#39;../fonts/noto-serif-sc-v7-latin_chinese-simplified-900.svg#NotoSerifSC\u0026#39;) format(\u0026#39;svg\u0026#39;); /* Legacy iOS */ } 5.在网页head.html中加入连接\n\u0026lt;link href=\u0026#34;/css/googlefonts.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; 😜","date":"2020-10-29T19:18:06+08:00","permalink":"//localhost:1313/post/tech/web-font/","section":"post","tags":["other","googlefont"],"title":"网页中引用GoogleFont的方法"},{"categories":["tech"],"contents":"1.查询服务器登录失败的信息 sudo grep \u0026#34;Failed password for root\u0026#34; /var/log/auth.log | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more sudo grep \u0026#34;Failed password for invalid user\u0026#34; /var/log/auth.log | awk \u0026#39;{print $13}\u0026#39; | sort | uniq -c | sort -nr | more 2.应对策略 2.1 SSH相关 2.1.1 不使用默认的22端口 ssh登陆默认的端口是22，而搬瓦工一般都默认是一个比较大的随机端口，不要为了方便，改回22。 修改 /etc/ssh/sshd_config文件，将其中的Port 22改为随意的端口比如Port 47832，port的取值范围是 0 – 65535(即2的16次方)，0到1024是众所周知的端口（知名端口，常用于系统服务等，例如http服务的端口号是80)。\n2.1.2 不要使用简单密码 默认生成的root密码是随机的，但是不要改成你自己的密码，你可以将密码记在手机上，但是一定不要改成你自己的有规律的密码。\n2.1.3 禁止使用密码登陆，使用RSA私钥登陆 跟之前写的debian ssh 连接android 通过termux里登陆部分是一样的。rsa的原理也不再赘述，wiki上的条目描述的很清楚。 先通过ssh-keygen -t rsa生成你的客户端的密钥，包括一个私钥和公钥，用scp id_rsa.pub root@XX.XX.XX.XX:~/把公钥拷贝到服务器上，注意，生成私钥的时候，文件名是可以自定义的，且可以再加一层密码，所以建议文件名取自己能识别出哪台机器的名字。然后在服务器上，你的用户目录下，新建.ssh文件夹，并将该文件夹的权限设为700，chmod 700 .ssh，并新建一个authorized_keys，这是默认允许的key存储的文件。如果已经存在，则只需要将上传的id_rsa.pub文件内容追加进去即可：cat id_rsa.pub \u0026gt;\u0026gt; authorized_keys，如果不存在则新建并改权限为400即可。 然后编辑ssh的配置文件：\nvi /etc/ssh/sshd_config RSAAuthentication yes #RSA认证 PubkeyAuthentication yes #开启公钥验证 AuthorizedKeysFile .ssh/authorized_keys #验证文件路径 PasswordAuthentication no #禁止密码认证 PermitEmptyPasswords no #禁止空密码\n最后保存，重启sshd服务\nsudo service sshd restart 2.1.4 禁止root用户登录 你可以新建一个用户来管理，而非直接使用root用户，防止密码被破解。 还是修改 /etc/ssh/sshd_config\nPermitRootLogin no\n2.2 使用Fail2ban 此部分原来用的是denyhosts，但是它几乎不更新了，现在用\rFail2ban\r一般软件源里都已经收录了它。\n2.2.1 配置文件 默认配置文件一般在 /etc/fail2ban/jail.conf。现在你已经准备好了通过配置 fail2ban 来加强你的SSH服务器。你需要编辑其配置文件 /etc/fail2ban/jail.conf。 在配置文件的“ [DEFAULT]”区，你可以在此定义所有受监控的服务的默认参数，另外在特定服务的配置部分，你可以为每个服务（例如SSH，Apache等）设置特定的配置来覆盖默认的参数配置。 在针对服务的监狱区（在[DEFAULT]区后面的地方），你需要定义一个[ssh-iptables]区，这里用来定义SSH相关的监狱配置。真正的禁止IP地址的操作是通过iptables完成的。\n[DEFAULT] # 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名 # 用于指定哪些地址可以忽略 fail2ban 防御 ignoreip = 127.0.0.1 172.31.0.0/24 10.10.0.0/24 192.168.0.0/24 # 客户端主机被禁止的时长（秒） bantime = 86400 # 客户端主机被禁止前允许失败的次数 maxretry = 5 # 查找失败次数的时长（秒） findtime = 600 mta = sendmail [ssh-iptables] enabled = true filter = sshd action = iptables[name=SSH, port=ssh, protocol=tcp] sendmail-whois[name=SSH, dest=your@email.com, sender=fail2ban@email.com] # Debian 系的发行版 logpath = /var/log/auth.log # Red Hat 系的发行版 logpath = /var/log/secure # ssh 服务的最大尝试次数 maxretry = 3 （其实默认配置即可） 根据上述配置，fail2ban会自动禁止在最近10分钟内有超过3次访问尝试失败的任意IP地址。一旦被禁，这个IP地址将会在24小时内一直被禁止访问 SSH 服务。\n2.2.2运行 一旦配置文件准备就绪，按照以下方式重启fail2ban服务。\n$ sudo service fail2ban restart 或者\n$ sudo systemctl restart fail2ban 为了验证fail2ban成功运行，使用参数\u0026rsquo;ping\u0026lsquo;来运行fail2ban-client 命令。 如果fail2ban服务正常运行，你可以看到“pong（嘭）”作为响应。 $ sudo fail2ban-client pingServer replied: pong\n2.2.3 解锁特定ip 检验fail2ban状态（会显示出当前活动的监狱列表）： $ sudo fail2ban-client status\n为了检验一个特定监狱的状态（例如ssh-iptables): $ sudo fail2ban-client status ssh-iptables\n上面的命令会显示出被禁止IP地址列表。\n为了解锁特定的IP地址： $ sudo fail2ban-client set ssh-iptables unbanip 192.168.1.8\n注意，如果你停止了Fail2ban 服务，那么所有的IP地址都会被解锁。当你重启 Fail2ban，它会从/etc/log/secure(或/var/log/auth.log)中找到异常的IP地址列表，如果这些异常地址的发生时间仍然在禁止时间内，那么Fail2ban会重新将这些IP地址禁止。\n2.2.4 设置 Fail2ban 自动启动 一旦你成功地测试了fail2ban之后，最后一个步骤就是在你的服务器上让其在开机时自动启动。在基于Debian的发行版中，fail2ban已经默认让自动启动生效。在基于Red-Hat的发行版中，按照下面的方式让自动启动生效。 在 CentOS/RHEL 6中: $ sudo chkconfig fail2ban on\n在 Fedora 或 CentOS/RHEL 7: $ sudo systemctl enable fail2ban\n2.3 终极杀手锏 iptables iptables，一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。在大部分的Linux系统上面，iptables是使用/usr/sbin/iptables来操作，文件则放置在手册页（Man page[2]）底下，可以通过 man iptables 指令获取。通常iptables都需要内核层级的模块来配合运作，Xtables是主要在内核层级里面iptables API运作功能的模块。因相关动作上的需要，iptables的操作需要用到超级用户的权限。\n# 清除已有iptables规则 iptables -F # 允许本地回环接口(即运行本机访问本机) iptables -A INPUT -i lo -j ACCEPT # 允许已建立的或相关连的通行 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT #允许所有本机向外的访问 iptables -A OUTPUT -j ACCEPT # 允许访问22端口，以下几条相同，分别是22,80,443端口的访问 iptables -A INPUT -p tcp --dport 22 -j ACCEPT iptables -A INPUT -p tcp --dport 80 -j ACCEPT iptables -A INPUT -p tcp --dport 443 -j ACCEPT #如果有其他端口的话，规则也类似，稍微修改上述语句就行 #允许ping iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT #禁止其他未允许的规则访问（注意：如果22端口未加入允许规则，SSH链接会直接断开。） iptables -A INPUT -j REJECT iptables -A FORWARD -j REJECT 开机启动项的设置可以参考Reference里关于iptables的条目\n","date":"2020-10-29T14:50:51+08:00","permalink":"//localhost:1313/post/tech/vps-secur/","section":"post","tags":["vps","ssh","security"],"title":"Vps 安全设置几个方法"},{"categories":["tech"],"contents":" https://github.com\r官网登录 下载git客户端 1.生成秘钥📜 打开git客户端，执行命令 ssh-keygen -t rsa -C \u0026#34;github的邮箱账号\u0026#34; 注意，需要给.ssh的7000权限\nsudo chmod -R 700 ~/.ssh 去这个目录，寻找id_rsa.pub文件，把文件的字符串复制。 登录官网github.com右上角人头像🤵➜setting a ssh and gpg keys a new ssh key➜制的内容➜add ssh keys\n2. 验证秘钥 git客户端输入ssh -T git@github.com ,按提示输入 yes 提示successfully即可\n3. 在服务器添加完公钥之后，ssh服务器然后报了这个错误 sign_and_send_pubkey: signing failed: agent refused operation 然后执行了以下命令才好。。\neval \u0026#34;$(ssh-agent -s)\u0026#34;\rssh-add 4.建立身份标识 git config --global user.name \u0026#39;github邮箱用户’\rgit config --global user.email github邮箱用户 案例1：把项目提交到github仓库 进入d盘，你的项目地址\n注意，有时候一些文件隐藏了.gitignore,凡是在目录中包含这个文件，将被忽略提交到github\ncd /d mkdir www cd www 创建一个文件随便输入字符保存退出.设置全局编码，防止代码乱码\ngit config --global gui.encoding utf-8 把项目缓存本地仓库\ngit add * 提交到本地仓库并备注\ngit commit –m “修改了文件” 推送到github的仓库\n如何创建github仓库，登录官网，人头像旁有个+号 new repository 创建完毕有有一个项目地址https://xxx.com/unrelaxs/test.git 创建完仓库后，提交到github仓库\n配置一下项目的地址 git remote add origin https://xxx.com/unrelaxs/test.git 把本地分支推送到服务器分支上–u表示如果仓库没有则新建一个 git push –u origin master[默认是master，如果有版本号则填写版本号]\n接着刷新\rhttps://xxx.com/unrelaxs/test.git\r这个网址，就能到你修改的内容了\n案例2：修改了文件，却没有任何的操作，想恢复到之前的代码 .代表所有文件 或者也可以指定具体路径下的文件 git checkout -- .\n案例3： 修改了文件，commit到缓冲区了（经过了add 和 commit），但是没有提交到github git reset HEAD .\n案例4：删除了文件如何恢复？？ git log 会弹出一个修改的列表：如\ncommit c2d7f0dc6196c87e636d121bf7f163ad31d8915d commit 后的就是id了 恢复54:35时间的东西\ngit checkout id . 案例5：如何把对应版本代码克隆到本地 git clone –b 版本号 代码链接 案例6：在修改代码前，必须要做的事 在修改前，必须是git pull 更新本地代码\n案例7：修改本地代码如何提交到服务器？？ git pull origin 1.0(指定1.0版本)或者 git pull git add . git commit –m “修改了test文件” ***git push 后的origin1.0 是指定版本，可不填写*** git push origin 1.0 案例8：从git上获取项目？？ git init 初始化一个仓库 git remote add origin 网址 git pull origin 分支 git checkout -b xx分支 #如果没有该分支则尝试会创建这个分支 案例9：从git上面 clone下来的项目后，如何拉取次分支以及合并主分支的代码呢？ git init\rgit clone http://xxxx\rgit branch -r 查看远程仓库的分支，如果没有，请重新操作，还是不行，只能百度了\rgit pull origin 分支名 注意了 origin是仓库名名，，如果 git branch -r 查看到 xx/origin/mobile 则第一个斜杠后，即origin为仓库名，mobile为分支名 案例10：从git上面 clone下来别人的项目后，如何提交到自己项目上？ git init\rgit clone http://xxx\rgit remote add origin http://你自己的项目地址\rgit pull origin master --allow-unrelated-histories\rgit add .\rgit commit -m \u0026#34;版本合并\u0026#34;\rgit push origin master 案例11：屏蔽某个目录，某个文件不提交到git .gitignore文件语法如下:\n# 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件 !lib.a # 但 lib.a 除外 /TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 在项目根目录创建 .gitignore\n案例12：新建一个分支，拉取另外一个分支代码, 并把新的分支合并到另外一个分支 git checkout -b feature_line git pull origin develop //拉取develop代码 git add . git commit -m \u0026#34;创建了个分支\u0026#34; git push origin feature_line git checkout -b develop //切换develop分支 git pull origin develop git merge feature_line //合并分支 git push origin develop //推送合并后的结果 案例13：同个电脑用不同的账号，账号对应不同的 github平台 生成sshkey ssh-keygen -t rsa -C \u0026ldquo;邮箱账号\u0026rdquo; 注意不要全部回车键 这里要写存储的路径如 $ ssh-keygen -t rsa -C \u0026#34;gg\u0026#34; Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): 这里填写绝对路径 或者相对路径 命名两个账号都不同如：/C/Users/Administrator/.ssh/id_rsa_one\n接着全部回车键，默认\n$ ssh-keygen -t rsa -C \u0026#34;gg\u0026#34; Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): 这里填写绝对路径 或者相对路径 命名两个账号都不同如：/c/Users/Administrator/.ssh/id_rsa_two\n进去/c/Users/Administrator/.ssh/ 这个目录 把 id_rsa_one.pub 跟two.pub 的秘钥 分别粘贴到不同的平台\n在这个目录 /c/Users/Administrator/.ssh/ 创建一个config文件，注意没有后缀 config文件内容如下：\nHost github.com\rHostName github.com\rIdentityFile ~/.ssh/id_rsa_two\rHost github_1033\rHostName gitee.com\rIdentityFile ~/.ssh/id_rsa_one 注意了，上面我分别是 github.com 分别对应的是 github.com的平台，秘钥是id_rsa_two ，在github后台别粘贴错秘钥！！\n而 github_1033 对应是 gitee.com的平台（码云），秘钥是 id_rsa_one\n在添加源的时候 git remote add origin git@github_1033:unrelaxs/object-design.git 码云明天的ssh项目地址是：\rgit@gitee.com\r:unrelaxs/object-design.git 因此我把gitee.com改为github_1033就行了\n4.1对比两个commit，并导出所有的文件\ngit archive -o ./export.zip 39e4d8cc9744877999b3f0554b48afe01ae83114 $(git diff --diff-filter=ACMR --name-only 25a0a906f4eb11d1da9654048c3af95ac50a8dac 39e4d8cc9744877999b3f0554b48afe01ae83114) a0ca27310aab94205d18c3415bd40b9821de2650 开始 commitId 7b9cead0f411ce42637f7633cfbb7c9078d3202e 结束 commitId\n忽略某文件夹下所有的内容提交，但保存该文件夹 在文件夹下 创建一个.gitignore，内容如下 # ignore all except .gitignore file\r*\r!.gitignore 😜\n","date":"2020-10-27T18:34:17+08:00","permalink":"//localhost:1313/post/tech/github-version/","section":"post","tags":["github"],"title":"Github版本控制的方法"},{"categories":["tech"],"contents":" from jlelse\u0026rsquo;s Blog\rHugo themes have the option to override the default rendering of Markdown images by using “Markdown Render Hooks” since version 0.62.0. By creating a file in layouts/_default/_markup named render-image.html it is possible to use a custom template for rendered images. This gives a lot of flexibility. I just used that flexibility to create a lightbox with pure CSS (without using JavaScript, like many lightbox implementations do). After clicking (or tapping) on an content image, you will see it filling the browser view. Another click brings you back to the content.\nI already used the render-image.html file to display the alternative text as a caption below the image, but now I added the lightbox. My current image template looks like this: html\rrender-image.html\r\u0026lt;figure\u0026gt;\r\u0026lt;a href=\u0026#34;#{{ .Destination | md5 }}-lightbox\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .PlainText }}\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;figcaption\u0026gt;\r{{ if .Title }}\r\u0026lt;p\u0026gt;{{ .Title | markdownify }}\u0026lt;/p\u0026gt;\r{{ else if .Text }}\r\u0026lt;p\u0026gt;{{ .Text | markdownify }}\u0026lt;/p\u0026gt;\r{{ end }}\r\u0026lt;/figcaption\u0026gt;\r\u0026lt;/figure\u0026gt;\r\u0026lt;a href=\u0026#34;#_\u0026#34; class=\u0026#34;lightbox\u0026#34; id=\u0026#34;{{ .Destination | md5 }}-lightbox\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .PlainText }}\u0026#34;\u0026gt;\r\u0026lt;/a\u0026gt;\rThe img element inside the figure element is wrapped by an anchor element linking to another hidden (and wrapped) img by it’s id. The id is generated using the md5 hash of the image source location.\nThe stylesheet (in SCSS) for the lightbox looks like this:\n.lightbox { display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 999; width: 100vw; height: 100vh; background: rgba(0,0,0,0.8); img { position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; max-width: 100%; max-height: 100%; } \u0026amp;:target { outline: none; display: block; } } The lightbox has a fixed position and covers the whole viewport by setting width and height to 100% of the viewport (100vw and 100vh). Inside that container the image is centered by using an absolute positition, setting the top, left, right and bottom positions to zero and setting automatic margin spacing.\n","date":"2020-10-27T16:20:56+08:00","permalink":"//localhost:1313/post/tech/tech01/","section":"post","tags":["hugo","CSS","lightbox"],"title":"Pure CSS Lightbox in Hugo theme"},{"categories":null,"contents":" What’s in a name? That which we call a rose by any other word would smell as sweet. (Romeo and Juliet 2.2)\n记录下我容易遗失的，哪怕有一天我忘了它在何处。\n本站使用 Hugo\r开发，网站主题使用了 hello friend\r。 Maybe you have a great idear, please let me know. ✉6666kw@gmail.com Hope you enojy it 😜!\n","date":"2020-10-27T00:00:00Z","permalink":"//localhost:1313/about/","section":"","tags":null,"title":"About"},{"categories":["tech"],"contents":" 本文来源于\rXEON CHOW\r博客，并进行修改。\n基本思路 Blog 网站整个的搭建流程大致如下： Windows 本地用 Hugo 进行网站的配置和编辑调试； 使用 Git 工具将 Windows 本地生成的网站文件夹远程部署到 VPS 服务器上； VPS上通过Git Hook自动编译发布网页文件 VPS 上使用 Nginx 作为 Web 网页服务器。 网页申请 SSL 证书并强制开启 HTTPS\n一、VPS端配置情况 1.安装Hugo客户端以及rsync 方式一\nsudo apt-get install hugo hugo version 方式二\nwget https://github.com/gohugoio/hugo/releases/download/v0.76.5/hugo_0.76.5_Linux-64bit.tar.gz tar -xzvf hugo_0.76.5_Linux-64bit.tar.gz sudo mv hugo /usr/local/bin/hugo # 随便您想放置的目录即可 hugo version apt install rsync 2.安装Git仓库，并配置权限 apt-get update apt-get install git-core 添加 git 用户\nuseradd git vi /etc/sudoers 1.在 User privilege specification 配置字段下添加 git\tALL=(ALL:ALL) ALL 从而使得 git 用户拥有 sudo 权限\n2.给 sudoer 文件添加权限 chmod 740 /etc/sudoers\n3.编辑 /etc/passwd 文件 vi /etc/passwd 将最后一行 git 用户的 /bin/sh 改为 /bin/bash，是 git 用户也拥有 bash 脚本解释器。\n4.创建 git 用户密码，并建立用户目录、配置权限 passwd git mkdir /home/git chown -R git:git /home/git 新建 VPS 端的 git 仓库 1.在 VPS 上新建一个 git 仓库作为远程仓库。切换到 git 用户并转到 git 用户文件夹 su git cd /home/git mkdir blog.git cd blog.git 2.初始化仓库 git init --bare\n3.在 /home/git 路径下创建存放 SSH 公钥的文件夹 .ssh 并进入，在该文件夹下新建公钥文件并编辑 cd /home/git mkdir .ssh cd .ssh vi authorized_keys 将前文 Windows 本地 /c/Users/Xeon/.ssh/ 位置生成的 SSH 公钥文件 id_rsa.pub 内容复制粘贴到 authorized_keys 文件中并 ：wq 保存。\n4.新建网页文件存放目录，通过root用户新建 /var/www 路径，并转到 /var/www 文件夹 exit mkdir -p /var/www cd /var/www mkdir blog 5.修改 /var/www/blog 文件夹权限，给用户Git赋予/tmp的操作权限，提示后输入root密码： chown -R git:git /var/www/blog/ sudo chmod -R 777 /tmp 设置 git 钩子脚本 创建一个 git 钩子脚本，主要目的是当 Windows 本地的文件被远程推送到 VPS 的 blog.git 仓库时，触发脚本自动将 blog.git 里的内容。\n1.切换为 git 用户和文件夹，新建 post-receive 脚本文件 su git cd cd blog.git/hooks/ vi post-receive post-receive内容如下：\n#!/bin/bash -e # A place to clone the remote repo so Hugo can build from it WORKING_DIRECTORY=/home/git/clone # Backup folder in case something goes wrong during this script BACKUP_WWW=/home/git/backup_html # Domain name so Hugo can generate links correctly MY_DOMAIN=blog.chihuashi.xyz GIT_REPO=/home/git/blog.git #TMP_DIR_CLONE=/tmp/blog PUBLIC_WWW=/var/www/blog # If something goes wrong, put the previous version back in place function cleanup { echo \u0026#34;A problem occurred. Reverting to backup.\u0026#34; rsync -aqz --del $BACKUP_WWW/ $PUBLIC_WWW rm -rf $WORKING_DIRECTORY } trap cleanup EXIT # Clear out the working directory rm -rf $WORKING_DIRECTORY # Make a backup copy of current website version rsync -aqz $PUBLIC_WWW/ $BACKUP_WWW # Clone the new version from GitHub git clone $GIT_REPO $WORKING_DIRECTORY # Delete old version rm -rf $PUBLIC_WWW/* # Have Hugo generate the new static HTML directly into the public WWW folder /usr/bin/hugo -s $WORKING_DIRECTORY -d $PUBLIC_WWW -b \u0026#34;https://${MY_DOMAIN}\u0026#34; # Clear out working directory # cp -rf $TMP_DIR_CLONE/* $PUBLIC_WWW rm -rf $WORKING_DIRECTORY # Exit without trapping, since everything went well trap - EXIT 2.给 post-receive 脚本文件添加可执行权限\nchmod +x post-receive 二、Windows 本地 Git 设置 在 Windows 本地安装 Git 的方法参考其他。\n安装后需要在本地新建一个 git 用户，设置用户名和邮箱（仅作用户识别使用，可填写任意邮箱地址）。在任意路径下打开 Git Bash 命令窗口，输入以下指令：\ngit config --global user.name \u0026#34;name\u0026#34;\rgit config --global user.email \u0026#34;emailaddress\u0026#34; 其中 \u0026ldquo;name\u0026rdquo; 和 \u0026ldquo;emailaddress\u0026rdquo; 字段填入自己的用户名和邮件地址（均可任意填写）。\n为了后续远程推送文件方便，在本地生成 ssh 密钥备用： ssh-keygen -t rsa -C \u0026quot;emailaddress\u0026quot; bash 会要求输入 Windows 用户的密码，无密码直接 enter。从而在 c/Users/Xeon/.ssh/ 路径下会生产 ssh 密钥，有公钥 id_rsa.pub 和密钥 id_rsa 两个文件。\n在 Hugo 生成的静态网页文件夹，即 D:\\Hugo\\Sites\\blog\\public 文件夹中打开 Git Bash 窗口，输入以下命令：\ngit init\rgit add --all\rgit commit -m \u0026#34;Description\u0026#34; 上面三个命令的意思分别是： 创建 git 仓库； 添加全部文件； 提交文件，其中 -m 表示本次更新的描述，描述内容为 \u0026ldquo;Description\u0026rdquo; 中的内容，按情况自行填写。 从而本地的 Git 仓库搭建完成，远程提交静态网页文件之前需要现在 VPS 上进行设置。\n三、Windows 本地推送 首先在 Windows 本地测试一下能否以 git 用户 ssh 登陆到 VPS ssh -p \u0026quot;22\u0026quot; git@VPS_ip 若提示 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!，可将 Windows 本地 /c/Users/Xeon/.ssh/ 下的 known_hosts 文件删除。\n本地推送\n回到已经创建为本地仓库的 D:\\Hugo\\Sites\\blog\\public 文件夹中打开 Git Bash 窗口，输入以下命令添加远程仓库：\ngit remote add origin git@your_VPS_IP:/home/git/blog.git\rgit remote set-url origin ssh://git@your_VPS_IP:SSH_Port/home/git/blog.git 以上命令中的 your_VPS_IP 为你 VPS 的 IP，SSH_Port 为你的 VPS SSH 登陆端口（一般默认为22）。 以上命令仅在初次推送前设置，以后无需设置。\n推送本地仓库到 VPS： git push origin master\n此时用浏览器访问域名 your_domain.com，即可打开自己的 blog 站点，并且自动开启了 HTTPS 加密。\n以后 Windows 本地更新内容后，只需在 D:\\Hugo\\Sites\\blog\\public 路径下打开 Git Bash 输入以下命令：\ngit init git add --all git commit -m \u0026#34;description\u0026#34; git push origin master 即可将更新内容推送到 VPS。\n自定义映射远程服务器IP地址的域名 每次远程登录都要这样ssh root@114.xxx.xxx.xxx\r，很麻烦有没有？！没有配域名的而且IP地址复杂后更加恶心有没有？！来一起配置一下对于本地的服务器的域名！编辑/c/windows/system32/drivers/etc目录下的hosts文件，用editplus打开即可，如下添加一行： 114.xxx.xxx.xxx (空格) ts.aliyun.com (回车换行)\n四、有关证书申请和配置 使用 acme 申请 SSL 证书，在此之前先要做好域名的解析。我使用 CloudFlare 进行域名解析，因此可以直接使用 CloudFlare 的 API 进行申请，比较方便，若使用其他解析服务，需要手动添加两条 txt 解析，可自行搜索教程。以下步骤均在 root 用户下。\n1.安装 acme 新建一个文件夹 /home/tls 存放证书和密钥\nrm -rf /home/tls \u0026amp;\u0026amp; mkdir -p /home/tls curl https://get.acme.sh | sh source ~/.bashrc 2.导入 CloudFlare 的 API 在 CloudFlare 的个人账户页面，找到 API Tokens-Global API Key，点击 view 查看，将 API Key 复制保存下来。在 VPS 上输入以下命令：\nexport CF_Key=\u0026#34;Your_API_Key\u0026#34; export CF_Email=\u0026#34;Your_CloudFlare_Email\u0026#34; 其中 CF_Key 和 CF_Email 填入自己的 API Key 和 CloudFlare 账户邮箱。\n3.申请证书 ~/.acme.sh/acme.sh --issue --dns dns_cf -d your_domain.com -d *.your_domain.com -k ec-256 以上命令中的 your_domain.com 替换为自己的域名，这个命令会生成 *.your_domain.com 泛域名的 SSL 证书，即 your_domain.com 下所有的二级、三级域名都会受到证书保护。所申请到的证书文件存放在 ~/.acme.sh/your_domain.com_ecc 文件夹下，~ 代表当前用户目录，若当前是 root 用户，则 ~ 代表 /root。\n4.安装证书并启用自动更新 将证书安装到 /home/tls 路径下\n~/.acme.sh/acme.sh --installcert -d your_domain.com -d *.your_domain.com --fullchainpath /home/tls/your_domain.com.crt --keypath /home/tls/your_domain.com.key --ecc\racme.sh --upgrade --auto-upgrade 同样将以上命令中的 your_domain.com 替换为自己的域名，此时在 /home/tls 路径下会生成证书文件 your_domain.com.crt 和密钥文件 your_domain.com.key。第二行命令设置证书到期自动更新。\n5.VPS 上 Nginx 设置 安装 Nginx\napt-get install nginx -y vi /etc/nginx/sites-enabled/default 用以下内容覆盖原配置default：\nserver { # 当 http 协议被请求时，统一转发到 https 协议上 listen 80; listen [::]:80; # IPV6 协议 server_name your_domain.com; rewrite ^(.*)$ https://$host$1 permanent; } server { listen 443 ssl; listen [::]:443 ssl; ssl_certificate /home/tls/your_domain.com.crt; # 证书的绝对路径 ssl_certificate_key /home/tls/your_domain.com.key; # 证书密钥的绝对路径 server_name your_domain.com; location / { root /var/www/blog/; #站点文件的路径 index index.html; } # 证书验证 location location /.well-known/acme-challenge/ { root /home/tls/; # 证书文件夹的路径 log_not_found off; } } 同样，将 your_domain.com 替换为自己的域名。以上 Nginx 配置文件的大概含义见注释，详细含义见 Nginx 官方文档。\n修改配置文件后需要重启 Nginx systemctl restart nginx ","date":"2020-10-26T21:01:00+08:00","permalink":"//localhost:1313/post/tech/use-git-deploy-hugo/","section":"post","tags":["Hugo","Github","vps"],"title":"用Hugo创建Blog站点并部署到VPS"},{"categories":["tech"],"contents":"Hugo Package wget https://github.com/gohugoio/hugo/releases/download/v0.76.5/hugo_0.76.5_Linux-64bit.tar.gz\rtar -xzvf hugo_0.76.5_Linux-64bit.tar.gz\rsudo mv hugo /usr/local/bin/hugo\rhugo version 创建仓库hug0 本地新建目录 g:\\hugo\\hugo\\\n新建一个测速网页文件index.html\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;我的第一个 HTML 页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;body 元素的内容会显示在浏览器中。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;title 元素的内容会显示在浏览器的标题栏中。\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git init\recho ^\u0026lt;h1^\u0026gt; Test Caddy Working^\u0026lt;/h1^\u0026gt;\rgit add .\rgit commit -m \u0026#34;first Test\u0026#34;\rgit remote add origin https://github.com/hsuzo1/hug0\rgit push -u origin master push后在仓库的master下可见了 创建vps上的网页目录\nmkdir /var/www\rmkdir /var/www/hugo\rcd /var/www echo \u0026#34;deb [trusted=yes] https://apt.fury.io/caddy/ /\u0026#34; | sudo tee -a /etc/apt/sources.list.d/caddy-fury.list\rsudo apt update\rsudo apt install caddy 修改caddy配置文件以通过域名访问 blog.hsuzo.cn\rroot * /var/www/hugo\rfile_server 再编辑Caddyfile\nhttp://blog.hsuzo.cn\rgit github.com/hsuzo1/hug0 .\rroot /var/www/hugo\rsudo setcap \u0026#39;cap_net_bind_service=+ep\u0026#39; /usr/bin/caddy\rcurl https://getcaddy.com | bash -s personal http.git,http.hugo ","date":"2020-10-25T21:34:23+08:00","permalink":"//localhost:1313/post/tech/noteforgit/","section":"post","tags":["Hugo","Git"],"title":"GIT命令的常用方法"},{"categories":["tech"],"contents":"接下来到当前Repository文件夹根目录中，如果没有初始化过，安装文章开始初始化的方法，进行初始化。 然后执行下面的命令\ngit remote add origin https://github.com/xuanhun/vscode.git git pull origin master 现在我们查看一下.git文件夹下的config文件，可以看到添加了远程Reps地址。 再次修改MD，push\n","date":"2020-10-22T09:42:40+08:00","permalink":"//localhost:1313/post/tech/vs/","section":"post","tags":["git","vs code"],"title":"GIT添加远程仓库"},{"categories":["Hugo"],"contents":"\r一室一厅电线用量 电线BV1.5平方单色线2卷（即，零线、火线各100米）\n电线BV2.5平方淡色线3卷（即，零线、火线、地线各100米）\n4芯电话线30米，高清电视线30米，电脑线30米\n二室一厅电线用量 电线BV1.5平方单色线100米2卷，50米2卷（即，零线、火线各150米）\n电线BV2.5平方淡色线100米3卷，50米3卷（即，零线、火线、地线各150米）\n4芯电话线50米，高清电视线50米，电脑线50米\n三室一厅电线用量 电线BV1.5平方单色线100米4卷（即，零线、火线各200米）\n电线BV2.5平方淡色线100米6卷（即，零线、火线、地线各200米） 4芯电话线50米，高清电视线50米，电脑线50米\n","date":"2020-10-20T16:24:37+08:00","permalink":"//localhost:1313/post/life/zh/001/","section":"post","tags":null,"title":"Hugo的中文博文测试"},{"categories":null,"contents":"Getting started Installation Create a new Hugo site:\n$ hugo new site [path] Clone this repository into themes/ directory:\n$ cd [path]\r$ git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c Add this line in the config.toml file:\ntheme = \u0026#34;m10c\u0026#34; Configuration In your config.toml file, define the following variables in params:\nauthor: Name of the author description: Short description of the author avatar: Path of file containing the author avatar image menu_item_separator: Separator between each menu item. HTML allowed (default: \u0026quot; - “) To add a menu item, add the following lines in menu:\n[[menu.main]] identifier = \u0026ldquo;tags\u0026rdquo; name = \u0026ldquo;Tags\u0026rdquo; url = \u0026ldquo;/tags/\u0026rdquo; Read Hugo documentations for more informations about menu\nTo add a social link, add the following lines in params:\n[[params.social]] name = \u0026ldquo;github\u0026rdquo; url = \u0026ldquo;\rhttps://github.com/vaga\"\rTo change theme colors, add the following lines in params:\n[params.style] darkestColor = \u0026ldquo;#d35050\u0026rdquo; darkColor = \u0026ldquo;#212121\u0026rdquo; lightColor = \u0026ldquo;#f5e3e0\u0026rdquo; lightestColor = \u0026ldquo;#f5f5f5\u0026rdquo; primaryColor = \u0026ldquo;#fff\u0026rdquo; If you want the above theme colors, you can see the exampleSite/config.toml file.\nStyling To override styles using scss, add a file called _extra.scss to {your site directory}/assets/css/\nNote: Hugo releases come in two versions, hugo and hugo_extended. You need hugo_extended to automatically compile your scss.\nLicense This theme is released under the MIT License.\nAcknowledgements feather - MIT\n","date":"2020-10-20T10:10:55+08:00","permalink":"//localhost:1313/post/abc/","section":"post","tags":null,"title":"第一个博客内容"}]